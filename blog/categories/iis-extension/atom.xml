<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IIS extension | .NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/blog/categories/iis-extension/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2014-07-31T23:33:17+03:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebDirProperties: AnonymousUser attribute is not obligatory]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/08/18/webdirproperties-anonymoususer/"/>
    <updated>2009-08-18T23:46:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/08/18/webdirproperties-anonymoususer</id>
    <content type="html"><![CDATA[<div class='post'>
<p>When you specify a <em>WebDirProperties</em> element to be used by the sites you install (configure) with WiX, you might also want to allow anonymous access to this site. Fortunately, there’s an attribute <em>AnonymousAccess</em>, which being set to ‘yes’ allows anonymous access to IIS web site.</p>  <p>NOTE: If you don’t address any property of “authorization” group (<em>AnonymousAccess, BasicAuthentication, DigestAuthentication, PassportAuthentication</em> or <em>WindowsAuthentication</em>) in your <em>WebDirProperties</em>, the site inherits those from w3svc root. If you set at least one explicitly, you need to set others the way you wish, because WiX defaults might not work for you. </p>  <p>The wix.chm states that “<a href="http://wix.sourceforge.net/manual-wix3/iis_xsd_webdirproperties.htm">When setting this (AnonymousAccess) to 'yes' you should also provide the user account using the AnonymousUser attribute, and determine what setting to use for the IIsControlledPassword attribute.</a>” But it turns out you are not forced to provide the AnonymousUser attribute and I suppose you never wanted to – you should provide a password as well, but who knows the password of IUSR on a target machine?</p>  <p>Instead, just omit the <em>AnonymousUser</em> attribute and this part of IIS metabase will stay untouched. The username/password will inherit from higher node (again, w3svc). And yes, don’t forget <em>IIsControlledPassword</em>=”yes”.</p>  <p>Hope this helps you tuning the website during the installation.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS extension: WebAppPool]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/01/20/iis-extension-webapppool/"/>
    <updated>2009-01-20T22:06:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/01/20/iis-extension-webapppool</id>
    <content type="html"><![CDATA[<div class='post'>
Another challenge - another piece of fun with WiX. Imagine the following requirement: the installation program must install an application pool on IIS6+ environments; the multiple installed instances should use the same application pool. In other words, the application pool must be created with the first instance installation, and must be removed with the last instance uninstallation. <div><br /></div><div>A special element for maintaining IIS AppPools in IIS extension is called WebAppPool. As usual, we'll wrap it into a separate component, so that it is created on install. Later, we'll create a special custom action to deceive the standard removing mechanism on uninstall:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Component DiskId="1" Id="CreateIISAppPool" Guid="{YOURGUID-6C5B-4980-AD0B-E32FA2DBC1F4}" Directory="WebsiteFolder"&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;Condition&gt;IISMAJORVERSION &lt;&gt; "#5"&lt;/Condition&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;iis:WebAppPool Id="IISSiteAppPool6" Name="[IISAPPPOOL_NAME]" MaxWorkerProcesses="1" Identity="networkService" /&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;RegistryKey Root="HKLM" Key="$(var.ParentKey)"&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            &lt;RegistryValue Name="IISAppPoolName" Type="string" Value="[IISAPPPOOL_NAME]"/&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;/RegistryKey&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Component&gt;</span></span></div><div><br /></div></div><div>As you can see, the component is installed once the target system has IIS 6+. It creates a WebAppPool with the name provided in IISAPPPOOL_NAME public property. It also writes this name into a registry value, which resides under the instance-specific registry key. </div><div>With this component included into the MSI package, the app pool is created when the first instance is installed, and nothing happens for second and subsequent instances. </div><div><br /></div><div>Let's examine the uninstall behavior. The MSI behaves natural - when it meets the component to uninstall, it removes the WebAppPool specified in it. But the IIS extension which performs the actual deletion of app pool, needs the name to be passed in it. So, the only thing we should do is to supply this action with a fake app pool name each time, except for the last instance uninstall.</div><div><br /></div><div>Here is the algorithm:</div><div><ol><li>search the registry for the app pool name as usual<br /></li><li>schedule a special action on unistall after AppSearch, which detects if this is the last instance being uninstalled, and if not, "breaks" the app pool name into something non-existent<br /></li></ol><div>The first point is quite straight-forward:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Property Id="IISAPPPOOL_NAME"&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;RegistrySearch Id="IISAppPoolName" Root="HKLM" Key="$(var.ParentKey)" Name="IISAppPoolName" Type="raw" /&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Property&gt;</span></span></div><div><br /></div></div><div>The second one is not natural, like any hack:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      [CustomAction]</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      public static ActionResult ChangeWebAppPoolNameToDeceiveUninstall(Session session)</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         int numberOfInstalled = 1;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         foreach (ProductInstallation product in ProductInstallation.GetRelatedProducts(session["UpgradeCode"]))</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            if ((session["ProductCode"] != product.ProductCode) &amp;&amp; product.IsInstalled)</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            {</span></span></div><div><span class="Apple-style-span"  style="color: rgb(51, 51, 255);  font-size:13px;">               numberOfInstalled++;</span><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">               break;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);"><br /></span></span></div><div><span class="Apple-style-span"  style="color: rgb(51, 51, 255);  font-size:13px;">         if (numberOfInstalled > 1)</span><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            session["IISAPPPOOL_NAME"] += string.Format("|{0}", DateTime.Now.ToLongTimeString());</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);"><br /></span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         return ActionResult.Success;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      }</span></span></div><div><br /></div></div><div>It iterates the related products (those sharing the UpgradeCode), and if it finds others installed, except for itself, it changes the app pool name we retrieved from registry into something unique, for instance, appends a unique string.</div><div><br /></div><div>Thus, the IIS custom action which is going to delete the app pool fails to find the one with the provided name, and does nothing. When, otherwise, it is the last instance being uninstalled, the retrieved app pool name remains unchanged, and the app pool is successfully removed.</div><div><br /></div><div>Note that the mentioned action should be <span class="Apple-style-span" style="font-weight: bold;">immediate</span>, should occur <span class="Apple-style-span" style="font-weight: bold;">after</span> AppSearch on <span class="Apple-style-span" style="font-weight: bold;">uninstall</span>.</div><div><br /></div><div>That's it! I would appreciate any comments as usual.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS extension: WebSite]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/01/19/iis-extension-website/"/>
    <updated>2009-01-19T22:04:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/01/19/iis-extension-website</id>
    <content type="html"><![CDATA[<div class='post'>
Ok, it's time for another portion of the installation fun, now about the IIS web sites.<div><br /></div><div>The IIS extension in WiX is probably the most tricky and unobvious. That's my personal impression, of course. But, anyway, it gives you an option to tweak any property of a website, virtual directory or web directory. </div><div><br /></div><div>When installing a web application on Windows XP and thus IIS 5.1, it is natural to create an "ad hoc" virtual directory during install and remove it on uninstall. That's basically quite common case, but what if the application requires to reside under the site root directly, not virtual directory? </div><div><br /></div><div>In this case the root of the Default Web Site should just be switched to the installation directory - nothing is created on install and nothing is removed on uninstall. Let's see how this can be done with WiX IIS extension.</div><div><br /></div><div>The iis:WebSite element has two "modes": if it resides under Component element, it is created during install, otherwise it is there just for reference from other elements. Fortunately, it has a special attribute ConfigureIfExists. Setting it to 'yes' avoids an attempt to create a new site, configuring the existent one instead:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Component DiskId="1" Id="ModifyIISSite5" Guid="{YOURGUID-2023-4D19-90D2-EE9101C71E44}" Directory="WebsiteFolder" <span class="Apple-style-span" style="font-weight: bold;">Permanent="yes"</span>&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;Condition&gt;IISMAJORVERSION = "#5"&lt;/Condition&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;iis:WebSite Id="IISSite5" Description="[IISSITE_NAME]" Directory="WebsiteFolder" <span class="Apple-style-span" style="font-weight: bold;">ConfigureIfExists="yes"</span>&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            &lt;iis:WebAddress Id="IISSiteAddress5" Port="[IISSITE_PORT]"/&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;/iis:WebSite&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Component&gt;</span></span></div><div><br /></div></div><div>Note, that in this case you should make sure you specified the existent website data. The website is uniquely identified by the description, port and header. The first is an attribute of a WebSite element itself, others belong to the child mandatory element WebAddress. </div><div><br /></div><div>The previous snippet highlights another attribute as bold - Permanent="yes". It makes the hosting component <a href="http://msdn.microsoft.com/en-us/library/aa369530(VS.85).aspx">permanent</a>, thus preventing it from being deleted on uninstall. Internally, the Windows Installer engine just keeps an extra reference to this component forever, thus it reference count is never equal to 0.</div><div><br /></div><div>One last thing I'd like to point your attention to is a component condition. It uses the property called IISMAJORVERSION. This property, as well as another one called IISMINORVERSION, is brought by the IIS extension. They are populated from the target system registry during the AppSearch action. Before using them in your authoring make sure you add a couple of references:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">    &lt;PropertyRef Id="IISMAJORVERSION"/&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">    &lt;PropertyRef Id="IISMINORVERSION"/&gt;</span></span></div><div><br /></div></div><div>That's it! As usual, any comments are highly appreciated.</div></div>

]]></content>
  </entry>
  
</feed>
