<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WiX | .NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/blog/categories/wix/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2018-02-20T23:13:24+02:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Revisited: Multiple Instance installations and patches]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance/"/>
    <updated>2011-09-14T23:00:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I initially <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">blogged about multiple instance installations</a> couple of years ago. The way I described it worked fine for me, but the time flies and the things has changed ever since – WiX grew up to even more solid toolset, and I also gained some knowledge. So, this post is to revisit the topic and look at it through the prism of WiX 3.6.<br />Imagine you have an application, and you’d like to be able to install several instances of it side-by-side on a single machine. The starting point is still to author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_instancetransforms.htm">InstanceTransforms</a> element: <pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;   <br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;   <br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;   <br />   &lt;Instance Id="I03" ProductCode="{GUIDGOES-HERE-5494-843B-BC07BBC022DB}" ProductName="My Product 03"/&gt;<br />    ...<br />&lt;/InstanceTransforms&gt;</pre>Obviously, the number of Instance elements is the number of instances supported by this installation program (plus the default one). In order to install the default instance, you should run the following command (assuming the generated MSI package is called MultiInstance.msi): <pre class="brush:csharp">msiexec /i MultiInstance.msi</pre>In order to start the installation of another instance, change the command as follows: <pre class="brush:csharp">msiexec /i MultiInstance.msi MSINEWINSTANCE=1 TRANSFORMS=":I01"</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa370326.aspx">MSINEWINSTANCE</a> property set to 1 instructs msiexec to start the installation of another instance instead of default one. Note that in the above example we installing the instance I01. The Instance element results into an <a href="http://msdn.microsoft.com/en-us/library/aa369528.aspx">instance transform</a> being embedded into the MSI package, and by setting <a href="http://msdn.microsoft.com/en-us/library/aa372085.aspx">TRANSFORMS</a> property to “:I01” we instruct msiexec to apply the embedded instance transform which corresponds to the I01 instance. The TRANSFORMS property can contain other transforms (for instance, language transforms), but that’s another topic.<br/><br/>Uninstalling looks quite similar, for instance, default instance uninstallation: <pre class="brush:csharp">msiexec /x MultiInstance.msi</pre>In order to uninstall the extra instance, you should explicitly specify its ProductCode. So, for instance I01 the uninstall command line looks like this: <pre class="brush:csharp">msiexec /x {GUIDGOES-HERE-4731-8DAA-9E843A03D482}</pre>So far, so good – it is quite straight-forward. Now, let’s turn to the <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">Windows Installer documentation about multiple instances</a> one more time. Apart from the requirement for each instance to have a unique product code and instance identifier (this is what WiX does for free with InstanceTransforms technique), it strongly recommends to keep the data isolated. For the file data, this means installing the files of each instance to a different location – the path containing instance ID as its part fits best. For the non-file data, it’s a bit more complex: the appropriate components should have different GUIDs, and again install to a different location. <br /><br/>In <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my first attempt to approach the problem</a>, I’ve applied a workaround: generate new GUIDs for each component of new instance, embed those “component transforms” into the resulting MSI and apply along with the instance transform. Well, sounds not very efficient, but assuming a great number of components harvested automatically, this was simple enough. Fortunately, wise developers of WiX team thought this through and came up with a far more elegant solution in version 3.6.<br /><br/>Starting from <a href="http://wix.sourceforge.net/releases/3.6.1502.0/">WiX 3.6.1502.0</a>, a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_component.htm">Component</a> element has an attribute MultiInstance of YesNo type. According to the WiX docs, “If this attribute is set to 'yes', a new Component/@Guid will be generated for each instance transform.” Fantastic! That’s what we need! Let’s see how it affects the multiple instance installations on a sample. Let’s say our installation program consists of the following components, and we’d like to be able to install this software at least 3 times: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre><pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;<br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;<br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;<br />&lt;/InstanceTransforms&gt;</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">MSDN recommendations about multiple instances</a> are followed, except for “keeping non-file data isolated”. Let’s see how it affects the install/uninstall. Run the installation of the default and I01 instance as described above. Both instances are installed to the different locations correctly:<br /><a href="http://lh4.ggpht.com/-kNoOE7Xgkpw/TnEDOVFxiDI/AAAAAAAAAc0/xDKdDlmf2-A/s1600-h/Instance00installed%25255B3%25255D.png"><img alt="Instance00installed" border="0" height="184" src="http://lh5.ggpht.com/-f-y_ymDDpsg/TnEDPFQTf5I/AAAAAAAAAc4/csVuv73w6Sc/Instance00installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00installed" width="683" /></a><a href="http://lh6.ggpht.com/-zBD-8Nbj_JI/TnEDPmI-ZxI/AAAAAAAAAc8/0z3a4i7fM50/s1600-h/Instance00RegInstalled%25255B3%25255D.png"><img alt="Instance00RegInstalled" border="0" height="248" src="http://lh3.ggpht.com/-02O4l8thb74/TnEDQGZV0vI/AAAAAAAAAdA/K2wTQXmZC6E/Instance00RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegInstalled" width="1076" /></a><br /><br /><a href="http://lh3.ggpht.com/-x9bhH2JcruA/TnEDQignM9I/AAAAAAAAAdE/pKGT89S6oZ0/s1600-h/Instance01installed%25255B3%25255D.png"><img alt="Instance01installed" border="0" height="186" src="http://lh6.ggpht.com/-cvLMQCx_o6o/TnEDRvly36I/AAAAAAAAAdI/wUbopNkDXM0/Instance01installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01installed" width="680" /></a><a href="http://lh3.ggpht.com/-siDWeoSZNXk/TnEDSF2Fx4I/AAAAAAAAAdM/TlKGNa3QMkk/s1600-h/Instance01RegInstalled%25255B3%25255D.png"><img alt="Instance01RegInstalled" border="0" height="248" src="http://lh6.ggpht.com/-biKeu4p_i_E/TnEDS_RZh0I/AAAAAAAAAdQ/wx4_Pnv-wkk/Instance01RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01RegInstalled" width="1076" /></a><br /><br />Now uninstall the default instance – you’ll see that non-file data was not removed properly:<br /><br /><a href="http://lh6.ggpht.com/-0AhXVNeVdgg/TnEDTVJjUXI/AAAAAAAAAdU/cdHC2RG-Ihs/s1600-h/Instance00broken%25255B3%25255D.png"><img alt="Instance00broken" border="0" height="144" src="http://lh3.ggpht.com/-U9e8M0FckmA/TnEDT5ySS2I/AAAAAAAAAdY/YQbr_a5y3uI/Instance00broken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00broken" width="679" /></a><a href="http://lh6.ggpht.com/-NzZrS2kAE3Q/TnEDURgH01I/AAAAAAAAAdc/AMxJ_8cBoBI/s1600-h/Instance00RegBroken%25255B3%25255D.png"><img alt="Instance00RegBroken" border="0" height="248" src="http://lh4.ggpht.com/-H55eKBQLubA/TnEDVKHy9TI/AAAAAAAAAdg/UVGYp9G2WAI/Instance00RegBroken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegBroken" width="1076" /></a><br /><br />This is happening because the components which hold this data are considered shared by the Windows Installer, and during uninstallation of one instance it detects that there’s another one pointing to the same components and leaves those untouched. Now if you uninstall the other instance, it successfully removes both EmptyFolder and registry key, but as a result we’ll still have orphaned resources of the first instance.<br /><br />That’s the initial problem, and let’s see how elegant new WiX feature deals with it. You should only add the MultiInstance=’yes’ attribute to the components holding non-file data, and forget about the problem of orphaned resources forever. Like this: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}" MultiInstance="yes"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}" MultiInstance="yes"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre>Now check the above scenario once again: install 2 instances and uninstall them. You’ll see that both install correctly and uninstall clearly. Isn’t it GREAT?! <img alt="Smile" class="wlEmoticon wlEmoticon-smile" src="http://lh4.ggpht.com/-Q_cR2rTJMrk/TnED307vexI/AAAAAAAAAdk/KCBp9wAo2vQ/wlEmoticon-smile%25255B2%25255D.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /><br /><br />Now, let’s turn to patching. Again, if we look back to <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my initial post on this topic</a>, I was using an ugly method to make the patch applicable for all instances of the installed product. That method assumed opening the binary patch for read/write and rude injection into its structure. Though it worked, there’s much more elegant way of doing this. I’d like to thank <a href="http://blogs.msdn.com/b/heaths/">Heath Stewart</a> for the hint – here’s the <a href="http://www.mail-archive.com/wix-users@lists.sourceforge.net/msg27696.html">full thread on wix-users mailing list</a>.<br /><br />So, the default behavior is the following: if you author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_patchbaseline.htm">PatchBaseline</a> element with its default validation settings, the patch will be applicable to the default instance only. That’s because it tracks the ProductCode is the product baseline it was built against, and checks it during install time. The trick is to add a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_validate.htm">Validate</a> child to the PatchBaseline, and instruct it not to check the ProductCode: <pre class="brush:xml">&lt;Media Id="5000" Cabinet="RTM.cab"&gt;<br />   &lt;PatchBaseline Id="RTM"&gt;<br />      &lt;Validate ProductId="no" /&gt;<br />   &lt;/PatchBaseline&gt;<br />&lt;/Media&gt;</pre>So, after you build this patch, you’ll be able to apply it to a particular instance: <pre class="brush:csharp">msiexec /i {GUIDGOES-HERE-4412-9BC2-17DAFFB00D20} PATCH=patch.msp /l*v patch.log</pre>Or to all the installed instances at once (so-called “double-click scenario”): <pre class="brush:csharp">msiexec.exe /p patch.msp /l*vx patch.log</pre>There’s still one more obvious inconvenience in the patch authoring, as for me. You have to specify the ProductCode entries twice: in the main installation sources (InstanceTransform/@ProductCode) and in the patch sources (TargetProductCode/@Id). It would be just fantastic if during patch building the WiX tools could look into the instance transforms collection of the baseline package and take the list of product codes out of there. That would omit the necessity to always specify the following section in the patch: <pre class="brush:xml">&lt;TargetProductCodes Replace="no"&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4412-9BC2-17DAFFB00D20}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" /&gt;<br />&lt;/TargetProductCodes&gt;</pre>As usual, WiX Toolset developers have done and keep doing fantastic job making our lives as setup developers easier! <br /><br />Feel free to leave a comment in case you have a note or a question. Feedback is welcome, as usual!</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe confuses the language validation and ProductCode validation]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation/"/>
    <updated>2010-05-07T19:34:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This week I faced with another issue with torch.exe. As you might know, there’s a “type” option (-t) to apply a predefined set of validation flags to the generated transform. If you’d like to generate a language transform, you should use “-t language”. It should suppress all the errors plus validate that language in both MSI packages corresponds. But it doesn’t…</p>  <p>The reason is just a simple bug in the tool. When you set “-t language” in the command line, this option is mapped to the TransformFlags.LanguageTransformDefault value. It is a combination of atomic values (those you can set via –serr and -val), and it mistakenly takes “validate product code” bit instead of “validate language bit”. I’ve never noticed this unless my installation uses both instance transforms and language transforms.</p>  <p>The workaround is quite simple: use literally “–serr” and “–val” to achieve the same result. For instance, for language transform it should be:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160; torch.exe … –serr a –serr b –serr c –serr d –serr e –serr f –val l …</p>  <p>[By the way, does it look too long just for me? I would prefer –serr abcdef :-)]</p>  <p>I’ve also filed an <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2998229&amp;group_id=105970&amp;atid=642714">issue</a> to the WiX toolset. Hope this can help somebody.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe throws scary error message unrelated to the real problem]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message/"/>
    <updated>2010-04-14T15:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I’ve been working on the localization of my installation project, and I had to create a number of language transforms. The following simple call of torch.exe</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; torch -t language setup.msi setup_ru-ru.msi -out mst\ru-ru.mst</p>  <p>returned the scary error message:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; error TRCH0001 : The Windows Installer service failed to start. Contact your support personnel</p>  <p>I’ve seen this kind of errors a couple of times, and it was a serious problem with Windows Installer engine on the target machine in all cases. Once, it indicated that Windows Installer service is completely broken, and only OS reinstall helped (fortunately, it was virtual PC)… But mighty Google gave <a href="http://blogs.msdn.com/pmarcu/archive/2008/05/30/Patching-something-you-didnt-build-with-WiX-using-WiX-.aspx#8920333">a single, but exact hint</a>. It is just a single line, and one can miss the point since that’s another problem which is discussed there. </p>  <p>So, the actual problem: if –out switch points to a folder which doesn’t exist (‘mst’ in this case), torch.exe can’t create it and returns the error. That’s okay behavior to live with, but the error message should be changed to something more appropriate: “The folder ‘mst’ can’t be found. Make sure it exists before referencing in –out switch”. I’ve also created <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2987095&amp;group_id=105970&amp;atid=642714">an issue</a> to the WiX inbox at sourceforge.net.</p>  <p>Hope this info is helpful until the message text is fixed.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebDirProperties: AnonymousUser attribute is not obligatory]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/08/18/webdirproperties-anonymoususer/"/>
    <updated>2009-08-18T23:46:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/08/18/webdirproperties-anonymoususer</id>
    <content type="html"><![CDATA[<div class='post'>
<p>When you specify a <em>WebDirProperties</em> element to be used by the sites you install (configure) with WiX, you might also want to allow anonymous access to this site. Fortunately, there’s an attribute <em>AnonymousAccess</em>, which being set to ‘yes’ allows anonymous access to IIS web site.</p>  <p>NOTE: If you don’t address any property of “authorization” group (<em>AnonymousAccess, BasicAuthentication, DigestAuthentication, PassportAuthentication</em> or <em>WindowsAuthentication</em>) in your <em>WebDirProperties</em>, the site inherits those from w3svc root. If you set at least one explicitly, you need to set others the way you wish, because WiX defaults might not work for you. </p>  <p>The wix.chm states that “<a href="http://wix.sourceforge.net/manual-wix3/iis_xsd_webdirproperties.htm">When setting this (AnonymousAccess) to 'yes' you should also provide the user account using the AnonymousUser attribute, and determine what setting to use for the IIsControlledPassword attribute.</a>” But it turns out you are not forced to provide the AnonymousUser attribute and I suppose you never wanted to – you should provide a password as well, but who knows the password of IUSR on a target machine?</p>  <p>Instead, just omit the <em>AnonymousUser</em> attribute and this part of IIS metabase will stay untouched. The username/password will inherit from higher node (again, w3svc). And yes, don’t forget <em>IIsControlledPassword</em>=”yes”.</p>  <p>Hope this helps you tuning the website during the installation.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSLT: inline blocks of managed code]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/07/19/xslt-inline-blocks-of-managed-code/"/>
    <updated>2009-07-19T23:24:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/07/19/xslt-inline-blocks-of-managed-code</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It’s not a secret that XSLT supports <a href="http://www.w3.org/TR/xslt11/#define-extension-functions">blocks of code</a>, written in another language, to be used inside the stylesheet. It seems to have been there from the very beginning – at least, <a href="http://www.w3.org/TR/xslt11/">XSLT 1.1</a> understands it. </p>  <p>However, Microsoft enriched this option with their own element, <a href="http://msdn.microsoft.com/en-us/library/ms256042.aspx">msxsl:script</a>. It offers pretty much the same functionality, but you can also write the code in C# or any other language of .NET platform. XSLT gurus might argue that it is superfluous stuff and it is unnecessary in 99% of cases. Well, as for me, XSLT lacks a number of useful functions in the standard library, such as ToLower/ToUpper, EndWith, etc. You never think about such low level things when programming C#, but you often have to invent a wheel trying to do the same with XSLT.</p>  <p>More details can be found in the <a href="http://msdn.microsoft.com/en-us/library/wxaw5z5e.aspx">official documentation</a>, but here is a brief extract:</p>  <ul>   <li>guess an extra prefix and let XSLT processor know about it:      <br />      <br />&lt;xsl:stylesheet version=&quot;1.0&quot;       <br />&#160; xmlns:xsl=&quot;<a href="http://www.w3.org/1999/XSL/Transform&quot;">http://www.w3.org/1999/XSL/Transform&quot;</a>       <br />&#160; xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot;       <br />&#160; <strong>xmlns:ext=&quot;</strong><a href="http://my.domain.com/ext&quot;"><strong>http://my.domain.com/ext&quot;</strong></a>&gt;       <br />&#160;&#160; ...       <br />&lt;/xsl:stylesheet&gt;       <br />      <br />Also, pay attention how msxsl prefix is defined – it is required to use msxsl:script syntax.       <br /></li>    <li>code your extension function:      <br />      <br />&lt;msxsl:script language=&quot;<strong>C#&quot;</strong> implements-prefix=&quot;<strong>ext</strong>&quot;&gt;       <br />&#160;&#160; public string ToUpper(string inString)       <br />&#160;&#160; {       <br />&#160;&#160;&#160;&#160;&#160; return inString.ToUpper();       <br />&#160;&#160; }       <br />&lt;/msxsl:script&gt;       <br /></li>    <li>and finally use it:      <br />      <br />&lt;xsl:value-of select=&quot;ext:ToUpper(@Name))&quot;/&gt; </li> </ul>  <p>Obviously, it is not a good idea to write lots of code this way. It makes the XSLT stylesheet larger and a bit harder to maintain. And, according to Microsoft, you should “<a href="http://msdn.microsoft.com/en-us/library/ms256042.aspx">avoid script blocks from XSLT files, because they require loading the script engine multiple times</a>”. Actually, if you created an XSLT stylesheet to fill it with tones of .NET code, you’re definitely doing something wrong. But it seems to be good addition to small, but useful “one-line” operations.</p>  <h4>Sitecore and msxsl:script</h4>  <p>If you plan to take advantage of inline blocks of C# code in Sitecore XSL rendering, you’ll have to do one more step. By default, .NET API to handle the XSL transforms disables the possibility to use msxsl:script. It is probably done for security reason. But the web.config of your Sitecore solution contains the setting <strong>EnableXslScripts</strong>, which you can easily set to true and be happy:</p>  <p>&lt;!--&#160; ENABLE XSLT SCRIPTS    <br />&#160;&#160;&#160;&#160;&#160; Determine whether XSLT script support should be enabled.     <br />&#160;&#160;&#160;&#160;&#160; If script support is not enabled, it will be an error if the XSLT file contains script blocks.     <br />&#160;&#160;&#160;&#160;&#160; <strong>Default value: false</strong>.     <br />--&gt;     <br />&lt;setting name=&quot;EnableXslScripts&quot; value=&quot;<strong>true</strong>&quot; /&gt; </p>  <p>The performance seems to be the same for this simple code either written in msxsl:script block, or wrapped into <a href="http://sdn.sitecore.net/upload/sitecore6/61/presentation_component_cookbook_sc61_a4.pdf">XSL extension</a>. So, the choice is yours.</p>  <h4>WiX and msxsl:script</h4>  <p>The <a href="http://wix.sourceforge.net/manual-wix3/heat.htm">heat.exe</a> utility of the WiX toolset has an option to run the harvested authoring against XSLT transform. This is a checkpoint when you can mutate the output before it is done. INHO, it is the most powerful extension option of Heat, because you can do anything with the XML fragment in XSLT.</p>  <p>However, it was a bit disappointing to find out the scripts are disabled by default, and it is not customizable, and the easiest way to fix this is to patch Heat itself and prepare custom WiX build. It would be great if this option is available one day in the base, either as a command line argument, or a configuration setting.</p>  <p>That’s it. If you have some experience with this trick, knowing its pros and cons deeper, share it here. And as usual, any comments are welcome.</p>  <p>P.S. this post was written with the help of Windows Live writer :-)</p>  </div>

]]></content>
  </entry>
  
</feed>
