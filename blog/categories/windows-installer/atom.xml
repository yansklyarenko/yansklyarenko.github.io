<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Windows Installer | .NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/blog/categories/windows-installer/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2013-07-25T23:37:50+03:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Revisited: Multiple Instance installations and patches]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance/"/>
    <updated>2011-09-14T23:00:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I initially <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">blogged about multiple instance installations</a> couple of years ago. The way I described it worked fine for me, but the time flies and the things has changed ever since – WiX grew up to even more solid toolset, and I also gained some knowledge. So, this post is to revisit the topic and look at it through the prism of WiX 3.6.<br />Imagine you have an application, and you’d like to be able to install several instances of it side-by-side on a single machine. The starting point is still to author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_instancetransforms.htm">InstanceTransforms</a> element: <pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;   <br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;   <br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;   <br />   &lt;Instance Id="I03" ProductCode="{GUIDGOES-HERE-5494-843B-BC07BBC022DB}" ProductName="My Product 03"/&gt;<br />    ...<br />&lt;/InstanceTransforms&gt;</pre>Obviously, the number of Instance elements is the number of instances supported by this installation program (plus the default one). In order to install the default instance, you should run the following command (assuming the generated MSI package is called MultiInstance.msi): <pre class="brush:csharp">msiexec /i MultiInstance.msi</pre>In order to start the installation of another instance, change the command as follows: <pre class="brush:csharp">msiexec /i MultiInstance.msi MSINEWINSTANCE=1 TRANSFORMS=":I01"</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa370326.aspx">MSINEWINSTANCE</a> property set to 1 instructs msiexec to start the installation of another instance instead of default one. Note that in the above example we installing the instance I01. The Instance element results into an <a href="http://msdn.microsoft.com/en-us/library/aa369528.aspx">instance transform</a> being embedded into the MSI package, and by setting <a href="http://msdn.microsoft.com/en-us/library/aa372085.aspx">TRANSFORMS</a> property to “:I01” we instruct msiexec to apply the embedded instance transform which corresponds to the I01 instance. The TRANSFORMS property can contain other transforms (for instance, language transforms), but that’s another topic.<br/><br/>Uninstalling looks quite similar, for instance, default instance uninstallation: <pre class="brush:csharp">msiexec /x MultiInstance.msi</pre>In order to uninstall the extra instance, you should explicitly specify its ProductCode. So, for instance I01 the uninstall command line looks like this: <pre class="brush:csharp">msiexec /x {GUIDGOES-HERE-4731-8DAA-9E843A03D482}</pre>So far, so good – it is quite straight-forward. Now, let’s turn to the <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">Windows Installer documentation about multiple instances</a> one more time. Apart from the requirement for each instance to have a unique product code and instance identifier (this is what WiX does for free with InstanceTransforms technique), it strongly recommends to keep the data isolated. For the file data, this means installing the files of each instance to a different location – the path containing instance ID as its part fits best. For the non-file data, it’s a bit more complex: the appropriate components should have different GUIDs, and again install to a different location. <br /><br/>In <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my first attempt to approach the problem</a>, I’ve applied a workaround: generate new GUIDs for each component of new instance, embed those “component transforms” into the resulting MSI and apply along with the instance transform. Well, sounds not very efficient, but assuming a great number of components harvested automatically, this was simple enough. Fortunately, wise developers of WiX team thought this through and came up with a far more elegant solution in version 3.6.<br /><br/>Starting from <a href="http://wix.sourceforge.net/releases/3.6.1502.0/">WiX 3.6.1502.0</a>, a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_component.htm">Component</a> element has an attribute MultiInstance of YesNo type. According to the WiX docs, “If this attribute is set to 'yes', a new Component/@Guid will be generated for each instance transform.” Fantastic! That’s what we need! Let’s see how it affects the multiple instance installations on a sample. Let’s say our installation program consists of the following components, and we’d like to be able to install this software at least 3 times: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre><pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;<br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;<br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;<br />&lt;/InstanceTransforms&gt;</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">MSDN recommendations about multiple instances</a> are followed, except for “keeping non-file data isolated”. Let’s see how it affects the install/uninstall. Run the installation of the default and I01 instance as described above. Both instances are installed to the different locations correctly:<br /><a href="http://lh4.ggpht.com/-kNoOE7Xgkpw/TnEDOVFxiDI/AAAAAAAAAc0/xDKdDlmf2-A/s1600-h/Instance00installed%25255B3%25255D.png"><img alt="Instance00installed" border="0" height="184" src="http://lh5.ggpht.com/-f-y_ymDDpsg/TnEDPFQTf5I/AAAAAAAAAc4/csVuv73w6Sc/Instance00installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00installed" width="683" /></a><a href="http://lh6.ggpht.com/-zBD-8Nbj_JI/TnEDPmI-ZxI/AAAAAAAAAc8/0z3a4i7fM50/s1600-h/Instance00RegInstalled%25255B3%25255D.png"><img alt="Instance00RegInstalled" border="0" height="248" src="http://lh3.ggpht.com/-02O4l8thb74/TnEDQGZV0vI/AAAAAAAAAdA/K2wTQXmZC6E/Instance00RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegInstalled" width="1076" /></a><br /><br /><a href="http://lh3.ggpht.com/-x9bhH2JcruA/TnEDQignM9I/AAAAAAAAAdE/pKGT89S6oZ0/s1600-h/Instance01installed%25255B3%25255D.png"><img alt="Instance01installed" border="0" height="186" src="http://lh6.ggpht.com/-cvLMQCx_o6o/TnEDRvly36I/AAAAAAAAAdI/wUbopNkDXM0/Instance01installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01installed" width="680" /></a><a href="http://lh3.ggpht.com/-siDWeoSZNXk/TnEDSF2Fx4I/AAAAAAAAAdM/TlKGNa3QMkk/s1600-h/Instance01RegInstalled%25255B3%25255D.png"><img alt="Instance01RegInstalled" border="0" height="248" src="http://lh6.ggpht.com/-biKeu4p_i_E/TnEDS_RZh0I/AAAAAAAAAdQ/wx4_Pnv-wkk/Instance01RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01RegInstalled" width="1076" /></a><br /><br />Now uninstall the default instance – you’ll see that non-file data was not removed properly:<br /><br /><a href="http://lh6.ggpht.com/-0AhXVNeVdgg/TnEDTVJjUXI/AAAAAAAAAdU/cdHC2RG-Ihs/s1600-h/Instance00broken%25255B3%25255D.png"><img alt="Instance00broken" border="0" height="144" src="http://lh3.ggpht.com/-U9e8M0FckmA/TnEDT5ySS2I/AAAAAAAAAdY/YQbr_a5y3uI/Instance00broken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00broken" width="679" /></a><a href="http://lh6.ggpht.com/-NzZrS2kAE3Q/TnEDURgH01I/AAAAAAAAAdc/AMxJ_8cBoBI/s1600-h/Instance00RegBroken%25255B3%25255D.png"><img alt="Instance00RegBroken" border="0" height="248" src="http://lh4.ggpht.com/-H55eKBQLubA/TnEDVKHy9TI/AAAAAAAAAdg/UVGYp9G2WAI/Instance00RegBroken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegBroken" width="1076" /></a><br /><br />This is happening because the components which hold this data are considered shared by the Windows Installer, and during uninstallation of one instance it detects that there’s another one pointing to the same components and leaves those untouched. Now if you uninstall the other instance, it successfully removes both EmptyFolder and registry key, but as a result we’ll still have orphaned resources of the first instance.<br /><br />That’s the initial problem, and let’s see how elegant new WiX feature deals with it. You should only add the MultiInstance=’yes’ attribute to the components holding non-file data, and forget about the problem of orphaned resources forever. Like this: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}" MultiInstance="yes"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}" MultiInstance="yes"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre>Now check the above scenario once again: install 2 instances and uninstall them. You’ll see that both install correctly and uninstall clearly. Isn’t it GREAT?! <img alt="Smile" class="wlEmoticon wlEmoticon-smile" src="http://lh4.ggpht.com/-Q_cR2rTJMrk/TnED307vexI/AAAAAAAAAdk/KCBp9wAo2vQ/wlEmoticon-smile%25255B2%25255D.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /><br /><br />Now, let’s turn to patching. Again, if we look back to <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my initial post on this topic</a>, I was using an ugly method to make the patch applicable for all instances of the installed product. That method assumed opening the binary patch for read/write and rude injection into its structure. Though it worked, there’s much more elegant way of doing this. I’d like to thank <a href="http://blogs.msdn.com/b/heaths/">Heath Stewart</a> for the hint – here’s the <a href="http://www.mail-archive.com/wix-users@lists.sourceforge.net/msg27696.html">full thread on wix-users mailing list</a>.<br /><br />So, the default behavior is the following: if you author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_patchbaseline.htm">PatchBaseline</a> element with its default validation settings, the patch will be applicable to the default instance only. That’s because it tracks the ProductCode is the product baseline it was built against, and checks it during install time. The trick is to add a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_validate.htm">Validate</a> child to the PatchBaseline, and instruct it not to check the ProductCode: <pre class="brush:xml">&lt;Media Id="5000" Cabinet="RTM.cab"&gt;<br />   &lt;PatchBaseline Id="RTM"&gt;<br />      &lt;Validate ProductId="no" /&gt;<br />   &lt;/PatchBaseline&gt;<br />&lt;/Media&gt;</pre>So, after you build this patch, you’ll be able to apply it to a particular instance: <pre class="brush:csharp">msiexec /i {GUIDGOES-HERE-4412-9BC2-17DAFFB00D20} PATCH=patch.msp /l*v patch.log</pre>Or to all the installed instances at once (so-called “double-click scenario”): <pre class="brush:csharp">msiexec.exe /p patch.msp /l*vx patch.log</pre>There’s still one more obvious inconvenience in the patch authoring, as for me. You have to specify the ProductCode entries twice: in the main installation sources (InstanceTransform/@ProductCode) and in the patch sources (TargetProductCode/@Id). It would be just fantastic if during patch building the WiX tools could look into the instance transforms collection of the baseline package and take the list of product codes out of there. That would omit the necessity to always specify the following section in the patch: <pre class="brush:xml">&lt;TargetProductCodes Replace="no"&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4412-9BC2-17DAFFB00D20}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" /&gt;<br />&lt;/TargetProductCodes&gt;</pre>As usual, WiX Toolset developers have done and keep doing fantastic job making our lives as setup developers easier! <br /><br />Feel free to leave a comment in case you have a note or a question. Feedback is welcome, as usual!</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Yan Sklyarenko</div>
<div class='content'>
Roman, sorry for the indecently long delay with this reply. For some reason, I&#39;ve just mentioned this post has got more comments.<br /><br />I would suggest you looking into the shared components direction. Here&#39;s a good explanation about how it works from Heath Stewart: http://blogs.msdn.com/b/heaths/archive/2009/12/21/about-shared-components.aspx. You should try to leverage the standard facilities of Windows Installer as much as possible.<br /><br />If this is not what you&#39;re looking for and you seek for a different type of behavior, I would suggest you to store some flag in registry, and check it each time you uninstall. For instance, you can have a registry key as a shared MSI component, and tie your custom functionality to the existence of that key.</div>
</div>
<div class='comment'>
<div class='author'>Yan Sklyarenko</div>
<div class='content'>
Davide, sorry for the indecently long delay with this reply. For some reason, I&#39;ve just mentioned this post has got more comments.<br /><br />In order to achieve the unique paths for each instance, I did the following:<br /><br />1) The directory structure is like this:<br /><br />      &lt;Directory Id=&quot;TARGETDIR&quot; Name=&quot;SourceDir&quot;&gt;<br>         &lt;Directory Id=&quot;ProgramFilesFolder&quot;&gt;<br>            &lt;Directory Id=&quot;INSTALLLOCATION&quot; Name=&quot;MultiInstance36&quot;&gt;<br>               &lt;Directory Id=&quot;ProductNameFolder&quot; Name=&quot;TestName&quot;&gt;<br />....<br />     &lt;/Directory&gt;<br>            &lt;/Directory&gt;<br>         &lt;/Directory&gt;<br>      &lt;/Directory&gt;<br /><br />2) Then there&#39;s a CA, which sets the install location to the proper value:<br /><br />   &lt;SetDirectory Id=&quot;ProductNameFolder&quot; Sequence=&quot;execute&quot; Value=&quot;[INSTALLLOCATION][ProductName]&quot; /&gt;<br /><br />3) And finally, each transform sets the ProductName to the desired unique value:<br /><br />&lt;Instance Id=&quot;I01&quot; ProductCode=&quot;{YOURGIUD-GOES-HERE-8DAA-9E843A03D482}&quot; ProductName=&quot;My Product 01&quot;/&gt;<br>         &lt;Instance Id=&quot;I02&quot; ProductCode=&quot;{YOURGUID-GOES-HERE-9E88-874745E9224C}&quot; ProductName=&quot;My Product 02&quot;/&gt;<br />...<br /><br />Hope it answers your question.</div>
</div>
<div class='comment'>
<div class='author'>Yan Sklyarenko</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
<div class='comment'>
<div class='author'>Roman Himmelreich</div>
<div class='content'>
Thank you, your article is very clean and helpful.<br /><br />I am using this method to allow multiple instances for my product. I was wondering, how would you approach management of additional resources which wix/installer do not support, like Certificates. I my case every instance is has a self-signed certificate which I create on install and remove on uninstall (this is not a problem because their names are different).<br />But in addition to that, I have another self-signed certificate which is in shared use for all of them (in this case their common DataLayer component).<br /><br />I have no problem creating it and skipping creation if it exists, but how would you suggest I should build the condition under which to delete it? How do I know that the current Uninstall session is the last?<br />(Checking the registry doesn&#39;t do it, because then you&#39;d need a deferred action to return some result value for the condition...)<br /><br />Thanks in advance for any thoughts,<br />Roman.</div>
</div>
<div class='comment'>
<div class='author'>Davide Icardi</div>
<div class='content'>
Thanks for the article! I just don&#39;t understand how can you kept your files separated for each instance. How do you have organized your directory inside wix? I have tried using <br /> &lt;Directory Id=&quot;InstanceDirectory&quot; Name=&quot;[INSTANCEID]&quot;&gt; <br />but doesn&#39;t work.<br /><br />thanks<br />davide</div>
</div>
<div class='comment'>
<div class='author'>Yan Sklyarenko</div>
<div class='content'>
Published an answer on SO - let&#39;s continue the dialog there.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Hi Yan do you have any thoughts on this?  I&#39;m trying to add the Patchbaseline element to my Patch XML.  Can you show my an example patch XML for WIX 3.6<br /><br />http://stackoverflow.com/questions/9982843/wix-3-6-patch-file-xml</div>
</div>
<div class='comment'>
<div class='author'>website designing development company chennai india</div>
<div class='content'>
I have read this post. collection of post is a nice one ..that am doing  <a href="http://www.anusuyaw3.com/web_designing.php" rel="nofollow"> website designing company chennai india</a> and <a href="http://www.anusuyaw3.com/web_designing.php" rel="nofollow"> website development company chennai india</a>. That I will inform about your post to my friends and all the best for your future posts..</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Wondering if you can help me out with my question posted here: http://stackoverflow.com/questions/9471790/patching-multiple-instance-installs-with-either-installshield-or-wix<br /><br />I can&#39;t get wix to put the files in the cab needed for the patch.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe confuses the language validation and ProductCode validation]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation/"/>
    <updated>2010-05-07T19:34:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This week I faced with another issue with torch.exe. As you might know, there’s a “type” option (-t) to apply a predefined set of validation flags to the generated transform. If you’d like to generate a language transform, you should use “-t language”. It should suppress all the errors plus validate that language in both MSI packages corresponds. But it doesn’t…</p>  <p>The reason is just a simple bug in the tool. When you set “-t language” in the command line, this option is mapped to the TransformFlags.LanguageTransformDefault value. It is a combination of atomic values (those you can set via –serr and -val), and it mistakenly takes “validate product code” bit instead of “validate language bit”. I’ve never noticed this unless my installation uses both instance transforms and language transforms.</p>  <p>The workaround is quite simple: use literally “–serr” and “–val” to achieve the same result. For instance, for language transform it should be:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160; torch.exe … –serr a –serr b –serr c –serr d –serr e –serr f –val l …</p>  <p>[By the way, does it look too long just for me? I would prefer –serr abcdef :-)]</p>  <p>I’ve also filed an <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2998229&amp;group_id=105970&amp;atid=642714">issue</a> to the WiX toolset. Hope this can help somebody.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe throws scary error message unrelated to the real problem]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message/"/>
    <updated>2010-04-14T15:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I’ve been working on the localization of my installation project, and I had to create a number of language transforms. The following simple call of torch.exe</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; torch -t language setup.msi setup_ru-ru.msi -out mst\ru-ru.mst</p>  <p>returned the scary error message:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; error TRCH0001 : The Windows Installer service failed to start. Contact your support personnel</p>  <p>I’ve seen this kind of errors a couple of times, and it was a serious problem with Windows Installer engine on the target machine in all cases. Once, it indicated that Windows Installer service is completely broken, and only OS reinstall helped (fortunately, it was virtual PC)… But mighty Google gave <a href="http://blogs.msdn.com/pmarcu/archive/2008/05/30/Patching-something-you-didnt-build-with-WiX-using-WiX-.aspx#8920333">a single, but exact hint</a>. It is just a single line, and one can miss the point since that’s another problem which is discussed there. </p>  <p>So, the actual problem: if –out switch points to a folder which doesn’t exist (‘mst’ in this case), torch.exe can’t create it and returns the error. That’s okay behavior to live with, but the error message should be changed to something more appropriate: “The folder ‘mst’ can’t be found. Make sure it exists before referencing in –out switch”. I’ve also created <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2987095&amp;group_id=105970&amp;atid=642714">an issue</a> to the WiX inbox at sourceforge.net.</p>  <p>Hope this info is helpful until the message text is fixed.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extended logging options in WiX custom actions]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/02/02/extended-logging-options-in-wix-custom/"/>
    <updated>2009-02-02T22:46:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/02/02/extended-logging-options-in-wix-custom</id>
    <content type="html"><![CDATA[<div class='post'>
The best and maybe the only way to find out what's going wrong with the installation is investigating the MSI log file. Fortunately, the Windows Installer respects log writing very much. You can find the ways to enable logging and different logging options <a href="http://msdn.microsoft.com/en-us/library/aa370536(VS.85).aspx">here</a>.<div><br /></div><div>The verbose log contains all the information MSI can generate. Though it is really useful when it comes to troubleshooting the failed installation, it is quite hard to read, especially for newbies. Again, fortunately, there's a super chapter "Using the Windows Installer log" in a super book called <a href="http://www.amazon.com/Definitive-Guide-Windows-Installer-Experts/dp/1590592972">"The Definitive Guide to Windows Installer" by Phil Wilson</a>, which guides you through the basics of log file reading and understanding.</div><div><br /></div><div>I used to generate the log file with /L*v options, which means verbose. But, if you use WiX custom actions, it turns out that you can make them logging even more verbose.</div><div><br /></div><div>If you browse the WiX source code, you can find the lines like this in its custom actions:</div><div><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">WcaLog(LOGMSG_STANDARD, "Error: Cannot locate User.User='%S'", wzUser);</span></span><br /></div><div><br /></div><div>The first argument is a logging level. It can be </div><div><ul><li>LOGMSG_STANDARD, which is "write to log whenever informational logging is enabled", which in most cases means "always"</li><li>LOGMSG_TRACEONLY, which is "write to log if this WiX build is a DEBUG build" (is often used internally to dump CustomActionData contents)<br /></li><li>LOGMSG_VERBOSE, which is "write to log when LOGVERBOSE"</li></ul><div>Wait a minute, what does the last option means? I've already set the verbose logging by /L*v, but I don't see more entries there. Here is the algorithm WiX CA use to know whether to write a log entry marked as LOGMSG_VERBOSE level:</div><div><ul><li>Check if the LOGVERBOSE property is set (can be set in the command-line since it is public)</li><li>Otherwise, check if the MsiLogging property is set (MSI 4.0+)</li><li>Otherwise, check the <a href="http://msdn.microsoft.com/en-us/library/aa369776(VS.85).aspx">logging policy in the registry</a></li></ul><div><br /></div><div>So, the following is the easiest way in my opinion to make your MSI (WiX-based) log file even more verbose:</div><div><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">   msiexec /i package.msi ... LOGVERBOSE=1 /L*v install.log</span></span></div><div><br /></div><div>Hope this helps.<br /></div><div><br /></div><div>P.S. This is just a brief extract of what's there in the source code. As usual, code is the best documentation ;-)</div></div></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Nelya Iva</div>
<div class='content'>
It is something new for me, thank&#39;s!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS extension: WebAppPool]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/01/20/iis-extension-webapppool/"/>
    <updated>2009-01-20T22:06:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/01/20/iis-extension-webapppool</id>
    <content type="html"><![CDATA[<div class='post'>
Another challenge - another piece of fun with WiX. Imagine the following requirement: the installation program must install an application pool on IIS6+ environments; the multiple installed instances should use the same application pool. In other words, the application pool must be created with the first instance installation, and must be removed with the last instance uninstallation. <div><br /></div><div>A special element for maintaining IIS AppPools in IIS extension is called WebAppPool. As usual, we'll wrap it into a separate component, so that it is created on install. Later, we'll create a special custom action to deceive the standard removing mechanism on uninstall:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Component DiskId="1" Id="CreateIISAppPool" Guid="{YOURGUID-6C5B-4980-AD0B-E32FA2DBC1F4}" Directory="WebsiteFolder"&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;Condition&gt;IISMAJORVERSION &lt;&gt; "#5"&lt;/Condition&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;iis:WebAppPool Id="IISSiteAppPool6" Name="[IISAPPPOOL_NAME]" MaxWorkerProcesses="1" Identity="networkService" /&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;RegistryKey Root="HKLM" Key="$(var.ParentKey)"&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            &lt;RegistryValue Name="IISAppPoolName" Type="string" Value="[IISAPPPOOL_NAME]"/&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;/RegistryKey&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Component&gt;</span></span></div><div><br /></div></div><div>As you can see, the component is installed once the target system has IIS 6+. It creates a WebAppPool with the name provided in IISAPPPOOL_NAME public property. It also writes this name into a registry value, which resides under the instance-specific registry key. </div><div>With this component included into the MSI package, the app pool is created when the first instance is installed, and nothing happens for second and subsequent instances. </div><div><br /></div><div>Let's examine the uninstall behavior. The MSI behaves natural - when it meets the component to uninstall, it removes the WebAppPool specified in it. But the IIS extension which performs the actual deletion of app pool, needs the name to be passed in it. So, the only thing we should do is to supply this action with a fake app pool name each time, except for the last instance uninstall.</div><div><br /></div><div>Here is the algorithm:</div><div><ol><li>search the registry for the app pool name as usual<br /></li><li>schedule a special action on unistall after AppSearch, which detects if this is the last instance being uninstalled, and if not, "breaks" the app pool name into something non-existent<br /></li></ol><div>The first point is quite straight-forward:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Property Id="IISAPPPOOL_NAME"&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;RegistrySearch Id="IISAppPoolName" Root="HKLM" Key="$(var.ParentKey)" Name="IISAppPoolName" Type="raw" /&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Property&gt;</span></span></div><div><br /></div></div><div>The second one is not natural, like any hack:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      [CustomAction]</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      public static ActionResult ChangeWebAppPoolNameToDeceiveUninstall(Session session)</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         int numberOfInstalled = 1;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         foreach (ProductInstallation product in ProductInstallation.GetRelatedProducts(session["UpgradeCode"]))</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            if ((session["ProductCode"] != product.ProductCode) &amp;&amp; product.IsInstalled)</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            {</span></span></div><div><span class="Apple-style-span"  style="color: rgb(51, 51, 255);  font-size:13px;">               numberOfInstalled++;</span><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">               break;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);"><br /></span></span></div><div><span class="Apple-style-span"  style="color: rgb(51, 51, 255);  font-size:13px;">         if (numberOfInstalled > 1)</span><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            session["IISAPPPOOL_NAME"] += string.Format("|{0}", DateTime.Now.ToLongTimeString());</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);"><br /></span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         return ActionResult.Success;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      }</span></span></div><div><br /></div></div><div>It iterates the related products (those sharing the UpgradeCode), and if it finds others installed, except for itself, it changes the app pool name we retrieved from registry into something unique, for instance, appends a unique string.</div><div><br /></div><div>Thus, the IIS custom action which is going to delete the app pool fails to find the one with the provided name, and does nothing. When, otherwise, it is the last instance being uninstalled, the retrieved app pool name remains unchanged, and the app pool is successfully removed.</div><div><br /></div><div>Note that the mentioned action should be <span class="Apple-style-span" style="font-weight: bold;">immediate</span>, should occur <span class="Apple-style-span" style="font-weight: bold;">after</span> AppSearch on <span class="Apple-style-span" style="font-weight: bold;">uninstall</span>.</div><div><br /></div><div>That's it! I would appreciate any comments as usual.</div></div></div>

]]></content>
  </entry>
  
</feed>
