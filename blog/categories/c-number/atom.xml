<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | .NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2014-07-31T23:33:17+03:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Default attribute values for custom NAnt tasks]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/08/15/default-attribute-values-for-custom/"/>
    <updated>2012-08-15T16:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/08/15/default-attribute-values-for-custom</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">When you create custom <a href="http://nant.sourceforge.net/">NAnt</a> tasks, you can specify various task parameter characteristics, such as whether it is a required attribute, how it validates its value, etc. This is done via the custom attributes in .NET, for example: <br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:035f0705-3d6e-49d1-b4f6-f204a32b007f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[TaskAttribute("param", Required = true), StringValidator(AllowEmpty = false)]<br />public string Param { get; set; }</pre></div>It might be a good idea to be able to specify a default value for a task parameter the similar way, for instance:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:ab15929c-f17e-4af8-a9f7-002707f23da4" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[TaskAttribute("port"), Int32Validator(1000, 65520), DefaultValue(16333)]<br />public int Port { get; set; }</pre></div>Let’s examine the way it can be implemented. First of all, let’s define the custom attribute for the default value:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:9610860a-ef97-4b43-b9fb-53404ae7af97" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">/// &lt;summary&gt;<br />/// The custom attribute for the task attribute default value<br />/// &lt;/summary&gt;<br />public class DefaultValueAttribute : Attribute<br />{<br />  public DefaultValueAttribute(object value)<br />  {<br />    this.Default = value;<br />  }<br /><br />  public object Default { get; set; }<br />}</pre></div>I suppose the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx">standard .NET DefaultValueAttribute</a> can be used for this purpose as well, but the one above is very simple and is good for this sample. Note also that in this situation we could benefit from the generic custom attributes, <a href="http://stackoverflow.com/questions/294216/why-does-c-sharp-forbid-generic-attribute-types">which unfortunately are not supported in C#, although are quite valid for CLR</a>.<br /><br />Now, when the attribute is defined, let’s design the way default values will be applied at runtime. For this purpose we’ll have to define a special base class for all our custom tasks we’d like to use default values technique:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d0e399ab-d366-4d25-babe-725de7760c30" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">public abstract class DefaultValueAwareTask : Task<br />{<br />  protected override void ExecuteTask()<br />  {<br />    this.SetDefaultValues();<br />  }<br /><br />  protected virtual void SetDefaultValues()<br />  {<br />    foreach (var property in GetPropertiesWithCustomAttributes&lt;DefaultValueAttribute&gt;(this.GetType()))<br />    {<br />      var attribute = (TaskAttributeAttribute)property.GetCustomAttributes(typeof(TaskAttributeAttribute), false)[0];<br />      var attributeDefaultValue = (DefaultValueAttribute)property.GetCustomAttributes(typeof(DefaultValueAttribute), false)[0];<br /><br />      if (attribute.Required)<br />      {<br />        throw new BuildException("No reason to allow both to be set", this.Location);<br />      }<br /><br />      if (this.XmlNode.Attributes[attribute.Name] == null)<br />      {<br />        property.SetValue(this, attributeDefaultValue.Default, null);<br />      }<br />    }<br />  }<br /><br />  private static IEnumerable&lt;PropertyInfo&gt; GetPropertiesWithCustomAttributes&lt;T&gt;(Type type)<br />  {<br />    return type.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance).Where(property =&gt; property.GetCustomAttributes(typeof(T), false).Length &gt; 0);<br />  }<br />}</pre></div>Let’s examine what this code actually does. The key method here is SetDefaultValues(). It iterates through the task parameters (the public properties marked with DefaultValueAttribute attribute) of the class it is defined in and checks whether the value carried by the DefaultValueAttribute should be set as a true value of the task parameter. It is quite simple: if the XmlNode of the NAnt task definition doesn’t contain the parameter in question, it means a developer didn’t set it explicitly, and it is necessary to set a default value. Moreover, if the task parameter is marked as Required and has a default value at the same time, this situation is treated as not appropriate and the exception is thrown.<br /><br />Obviously, when a custom NAnt task derives from the DefaultValueAwareTask, it has to call base.ExecuteTask() at the very start of its ExecuteTask() method implementation for this technique to work.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate a solution file for a number of C# projects files in a folder]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/07/06/generate-solution-file-for-number-of-c/"/>
    <updated>2012-07-06T14:59:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/07/06/generate-solution-file-for-number-of-c</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Some time ago I wrote my first T4 template which generates a solution (*.sln) file out of a number of C# project (*.cspoj) files, located in a folder and all descendants. Although it turned out not to be necessary to solve the task I was working on, and assuming it’s quite simple, I still decided to share it for further reference. May someone can find it useful. So, below is the entire T4 template, with no extra comments:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:260cba0a-462d-4da5-bf82-2a4da7bd7cdf" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;gutter:false;wrap-lines:false;">Microsoft Visual Studio Solution File, Format Version 11.00<br /># Visual Studio 2010<br />&lt;#@ template language="cs" hostspecific="false" #&gt;<br />&lt;#@ output extension=".sln" #&gt;<br />&lt;#@ parameter name="Folder" type="System.String" #&gt; <br />&lt;#@ assembly name="System.Core" #&gt;<br />&lt;#@ assembly name="System.Xml" #&gt;<br />&lt;#@ assembly name="System.Xml.Linq" #&gt;<br />&lt;#@ import namespace="System.IO" #&gt;<br />&lt;#@ import namespace="System.Linq" #&gt;<br />&lt;#@ import namespace="System.Xml.Linq" #&gt; <br />&lt;#<br />    if (Directory.Exists(Folder))<br />    {<br />        var csprojFiles= Directory.GetFiles(Folder, "*.csproj", SearchOption.AllDirectories);<br />        foreach (var file in csprojFiles)<br />        {<br />            ProjectFileMetaData metaData = new ProjectFileMetaData(file, Folder);<br />            WriteLine("Project(\"{3}\") = \"{0}\", \"{1}\", \"{2}\"",  metaData.Name, metaData.Path, metaData.Id, ProjectFileMetaData.ProjectTypeGuid);<br />            WriteLine("EndProject");<br />        }<br />    }<br />#&gt;<br /><br />&lt;#+ <br />    public class ProjectFileMetaData<br />    {<br />        public static string ProjectTypeGuid = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";<br /><br />        public ProjectFileMetaData(string file, string root)<br />        {<br />            InitProperties(file, root);<br />        }<br /><br />        public string Name { get; set; }<br /><br />        public string Path { get; set; }<br /><br />        public string Id { get; set; }<br /><br />        private void InitProperties(string file, string root)<br />        {<br />            XDocument xDoc = XDocument.Load(file);<br />            XNamespace ns = @"http://schemas.microsoft.com/developer/msbuild/2003";<br />            XElement xElement = xDoc.Root.Elements(XName.Get("PropertyGroup", ns.NamespaceName)).First().Element(XName.Get("ProjectGuid", ns.NamespaceName));<br />            if (xElement != null)<br />            {<br />                this.Id = xElement.Value;<br />            }<br /><br />            this.Path = file.Substring(root.Length).TrimStart(new char[] { '\\' });<br /><br />            this.Name = System.IO.Path.GetFileNameWithoutExtension(file);<br />        }<br />    }<br />#&gt;</pre></div></div></div>

]]></content>
  </entry>
  
</feed>
