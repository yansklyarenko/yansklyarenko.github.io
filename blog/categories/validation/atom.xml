<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: validation | .NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/blog/categories/validation/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2018-02-20T23:25:52+02:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Validating the source of TreeList]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/03/22/validating-source-of-treelist/"/>
    <updated>2009-03-22T21:18:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/03/22/validating-source-of-treelist</id>
    <content type="html"><![CDATA[<div class='post'>
Sitecore 6 validation was designed to validate the field values. Recently, I also found it useful to control the source of the complex field types, like TreeList. In this post, I'll explain this option taking the TreeList field type as an example.<div><br /></div><div>I'm skipping the validation basics here, since this topic is covered by <a href="http://alexeyrusakov.com/sitecoreblog/">Alexey Rusakov</a> in his <a href="http://alexeyrusakov.com/sitecoreblog/2008/07/02/Sitecore+6+Validation+Part+1.aspx">validation series</a>.</div><div><br /></div><div>You can define a number of parameters in the source of TreeList field type. The complete list is described in the paragraph 2.4.2 "How to Control the List of Items in a Selection Field" of the <a href="http://sdn5.sitecore.net/upload/sitecore6/datadefinitioncookbook-a4.pdf">Data Definition cookbook</a>. These parameters can filter the available and visible items in the content tree (IncludeTemplatesForSelection, ExcludeItemsForDisplay, etc.), define the tree root (DataSource), control multiple selection (AllowMultipleSelection), etc.</div><div><br /></div><div>But modifying this long list of parameters in a one-line edit field can lead to a simple typos, both in the parameters' names and values. Let's examine how this can be "solved" by introducing a source validator.</div><div><br /></div><div>The BaseValidator class, the very root of the validator hierarchy in Sitecore API, has a protected method GetField(), which returns an instance of a Field - the one we validate. Hence, the Source property is also available. We want to validate only complex source here, thus skipping if it is an ID or an item path:</div><div><br /></div><div><div>        protected override ValidatorResult Evaluate()</div><div>        {</div><div>            ValidatorResult result = ValidatorResult.Valid;</div><div><br /></div><div>            Field field = GetField();</div><div>            if (field != null)</div><div>            {</div><div>                string fieldSource = field.Source;</div><div>                if (!string.IsNullOrEmpty(fieldSource) &amp;&amp; !ID.IsID(fieldSource) </div><div>                    &amp;&amp; !fieldSource.StartsWith("/", StringComparison.InvariantCulture))</div><div>                {</div><div>                    result = EvaluateSourceParameters(fieldSource);</div><div>                }</div><div>            }</div><div><br /></div><div>            return result;</div><div>        }</div><div><br /></div></div><div>Ok, let's start the validation from just the verification if the source is "well-formed". It might happen that a certain parameter was left without a value, or a typo was introduced to the well-known name. Sitecore will never throw an error in such a case, but instead you may receive an orphaned field with nothing to choose from. Thus, the simplest validation includes these two checks, otherwise it keeps the name/value pairs for further analysis:</div><div><br /></div><div><div>        ValidatorResult EvaluateSourceParameters(string fieldSource)</div><div>        {</div><div>            SafeDictionary<string> parameters = new SafeDictionary<string>();</string></string></div><div>            string[] sourceParts = fieldSource.Split('&amp;');</div><div>            foreach (string part in sourceParts)</div><div>            {</div><div>                if (string.IsNullOrEmpty(part))</div><div>                {</div><div>                    continue;</div><div>                }</div><div>                if (!part.Contains("=") || part.EndsWith("="))</div><div>                {</div><div>                    Text = string.Format("The value is not set for source parameter '{0}'", part.TrimEnd('='));</div><div>                    return GetFailedResult(ValidatorResult.Error);</div><div>                }</div><div>                else</div><div>                {</div><div>                    string parameterName = part.Substring(0, part.IndexOf('=')).ToLower();</div><div>                    if (!sourceParameters.Contains(parameterName))</div><div>                    {</div><div>                        Text = string.Format("Unknown source parameter '{0}'", parameterName);</div><div>                        return GetFailedResult(ValidatorResult.Error);</div><div>                    }</div><div>                    else</div><div>                    {</div><div>                        string parameterValue = part.Substring(part.IndexOf('=') + 1);</div><div>                        parameters.Add(parameterName, parameterValue);</div><div>                    }</div><div>                }</div><div>            }</div><div>            return EvaluateWellFormedParameters(parameters);</div><div>        }</div><div><br /></div><div>The further validation can go deeper and verify the presence of the specified template or item. The method EvaluateWellFormedParameters in this example just iterates the name/value pairs of parameters and applies a certain validation strategy, for instance:</div><div><br /></div><div><div>        ValidatorResult EvaluateTemplates(string value, Database database)</div><div>        {</div><div>            string[] templates = value.Split(new char[] { ',' });</div><div>            foreach (string template in templates)</div><div>            {</div><div>                if (!string.IsNullOrEmpty(template) &amp;&amp; Query.SelectSingleItem(string.Format("/sitecore/templates//*[@@key='{0}']", template.ToLower()), database) == null)</div><div>                {</div><div>                    Text = string.Format("The template '{0}' doesn't exist in the '{1}' database", template, database.Name);</div><div>                    return ValidatorResult.Warning;</div><div>                }</div><div>            }</div><div>            return ValidatorResult.Valid;</div><div>        }</div><div><br /></div><div>I'm attaching the <a href="http://sites.google.com/site/yshost/Home/files/TreeListSourceValidator.cs">full code of this example</a>. </div><div><br /></div><div>There are several notes to consider:</div><div><ul><li>The DatabaseName parameter is not validated, because Sitecore takes over this. Try specifying DatabaseName=nosuchdb, and press Save</li><li>The parameter names are case-insensitive. This is because the parameters are extracted with the StringUtil.ExtractParameter() method, which ignores the case</li><li>The TreeList field type doesn't "tolower" the values of IncludeItemsForDisplay and ExcludeItemsForDisplay parameters. Hence, be sure to specify an item key instead of an item name here</li><li>The content tree filter is built out of the "ForDisplay" parameters using 'and' operation. Thus, if IncludeItemsForDisplay contain items of other templates than those specified in IncludeTemplatesForDisplay, this results in an empty tree. This can also be a point of extension of this validator's functionality</li></ul><div>Hope anyone finds this article useful. As usual, I would appreciate any comments.</div></div></div></div><div><br /></div></div>

]]></content>
  </entry>
  
</feed>
