<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[.NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2018-02-20T23:13:24+02:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Transform Trello list into Markdown file]]></title>
    <link href="http://yansklyarenko.github.io/blog/2018/02/20/transform-trello-list-into-markdown-file/"/>
    <updated>2018-02-20T21:38:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2018/02/20/transform-trello-list-into-markdown-file</id>
    <content type="html"><![CDATA[<p>I really enjoy reading. And I think I read a lot. I&rsquo;m sure there are people who read much more, but&hellip; well, that&rsquo;s not what I was going to tell you.</p>

<p>One day I realized that some book recommendations I come across got lost in my memory, so I started a special <a href="https://trello.com">Trello</a> board. Basically, when I get a book recommendation from a person I respect, I add a new card to the initial <em>To Read</em> list of that board. When a certain book is read, I write a short review into the Description of the appropriate card and move it to final <em>Done</em> list.</p>

<p><img src="http://yansklyarenko.github.io/images/february2018/trello_reading_board.png"></p>

<p>Thus, the <em>Done</em> list gets populated with (quite subjective) book reviews. I thought it might be a good idea to post those reviews as a separate article. One day.</p>

<p>As long as compiling long lists out of dozens small snippets is a boring task, it turns out to be a good occasion to play with the Trello API.</p>

<p>So, the idea is to have a PowerShell script which will iterate over the cards in the list and generate a nice Markdown file.</p>

<h2>Prerequisites: app key and authorization</h2>

<p>First of all, you should acquire the app key &ndash; the entity required for all subsequent operations. Simple head over to <a href="https://trello.com/app-key">https://trello.com/app-key</a> to get this API key. Let&rsquo;s put it into the variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$apiKey</span> <span class="p">=</span> <span class="s2">&quot;LongSequenceOfCharsWhichIsBasicallyAnApiKey&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Real-world applications will need to ask each user to authorize the application, but as long as we are just playing with it locally, let&rsquo;s manually generate a token. Open this URL in your browser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">trello</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">1</span><span class="p">/</span><span class="n">authorize</span><span class="k">?</span><span class="n">expiration</span><span class="p">=</span><span class="n">never</span><span class="p">&amp;</span><span class="n">scope</span><span class="p">=</span><span class="n">read</span><span class="p">&amp;</span><span class="n">response_type</span><span class="p">=</span><span class="n">token</span><span class="p">&amp;</span><span class="n">name</span><span class="p">=</span><span class="n">Server</span><span class="k">%</span><span class="n">20Token</span><span class="p">&amp;</span><span class="n">key</span><span class="p">=&lt;</span><span class="n">PASTE_ABOVE_KEY_HERE</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we specify the expiration term (never) and the token scope (read only) here. Copy the token when it appears on the page and save into another variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$token</span> <span class="p">=</span> <span class="s2">&quot;EvenLongerSequenceOfCharsWhichIsGuessWhatRightTheToken&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll need both values for any REST API request, so let&rsquo;s make our life easier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$authSuffix</span> <span class="p">=</span> <span class="s2">&quot;key=$apiKey&amp;token=$token&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Get the Board ID to work with</h2>

<p>Okay, the preparations are over, and it&rsquo;s time to get the ID of the board we&rsquo;ll work with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/members/me?boards=open&amp;board_fields=name&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$boardId</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Boards</span> <span class="p">|</span> <span class="n">where</span> <span class="n">name</span> <span class="o">-EQ</span> <span class="s2">&quot;Reading&quot;</span> <span class="p">|</span> <span class="n">select</span> <span class="n">-ExpandProperty</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>The URL instructs the API to get all my open boards, which is then piped through <em>where</em> filter to get the one called &ldquo;Reading&rdquo;.</p>

<h2>Get the Labels used on the Board</h2>

<p>When I finish a book, I mark it with one of the following labels:</p>

<ul>
<li>Green:    Recommended</li>
<li>Blue:     Indifferent</li>
<li>Yellow:   OK for one-time reading</li>
<li>Red:      Waste of time</li>
</ul>


<p>We&rsquo;ll format the subheaders of each book review depending on the label it has. For instance, recommended books will be highlighted in <strong>bold</strong>, while clearly not recommended will be <del>struck though</del>. Let&rsquo;s get the list of those labels:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/boards/</span><span class="si">$(</span><span class="err">$</span><span class="si">boardId)</span><span class="s2">?labels=all&amp;label_fields=color&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$labels</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Labels</span> <span class="p">|</span> <span class="nb">Convert-ArrayToHashTable</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a result, we have a hashtable &ndash; <em>LabelId : LabelColor</em>.</p>

<h2>Get the  List ID containing the Cards</h2>

<p>Trello cards live inside the lists, so let&rsquo;s get the <em>Done</em> list. As long as I know that the necessary list is the last one, it&rsquo;s a bit easier scripted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/boards/</span><span class="si">$(</span><span class="err">$</span><span class="si">boardId)</span><span class="s2">?lists=open&amp;list_fields=id,name&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$listId</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Lists</span> <span class="p">|</span> <span class="n">select</span> <span class="n">-Last</span> <span class="n">1</span> <span class="n">-ExpandProperty</span> <span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Get the Cards from the List</h2>

<p>Now, when we have the list ID, we are just one call away from getting the collection of cards. Note that we only get necessary fields &ndash; in this case <strong>Title</strong> (subheader), <strong>Label</strong> (subheader formatting) and <strong>Description</strong> (actual text of the review).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/lists/</span><span class="si">$(</span><span class="err">$</span><span class="si">listId)</span><span class="s2">?cards=all&amp;card_fields=name,desc,idLabels&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$cards</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Cards</span> <span class="p">|</span> <span class="n">select</span> <span class="err">@</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s2">&quot;Title&quot;</span><span class="err">;</span>       <span class="n">Expression</span><span class="p">={</span><span class="nv">$_</span><span class="p">.</span><span class="n">name</span><span class="p">}},</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s2">&quot;Label&quot;</span><span class="err">;</span>       <span class="n">Expression</span><span class="p">={</span><span class="nv">$labels</span><span class="p">[</span><span class="nv">$_</span><span class="p">.</span><span class="n">idLabels</span><span class="p">[</span><span class="n">0</span><span class="p">]]}},</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s2">&quot;Description&quot;</span><span class="err">;</span> <span class="n">Expression</span><span class="p">={</span><span class="nv">$_</span><span class="p">.</span><span class="n">desc</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>And a bit of formatting magic for dessert</h2>

<p>Finally, the collection of cards is transformed to become a nicely formatted Markdown document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Convert-TableToMarkdown</span> <span class="nv">$cards</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the script, and you&rsquo;ll get a markdown document, similar to this one:</p>

<p><img src="http://yansklyarenko.github.io/images/february2018/result_markdown.png"></p>

<h2>The full listing of the PowerShell script</h2>

<p>Here is the script I ended up with, including some under-the-hood formatting magic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="nb">Convert-ArrayToHashTable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">begin</span> <span class="p">{</span> <span class="nv">$hash</span> <span class="p">=</span> <span class="err">@</span><span class="p">{}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">process</span> <span class="p">{</span> <span class="nv">$hash</span><span class="p">[</span><span class="nv">$_</span><span class="p">.</span><span class="n">id</span><span class="p">]</span> <span class="p">=</span> <span class="nv">$_</span><span class="p">.</span><span class="n">color</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$hash</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nb">Get-WrapperByLabel</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Mandatory</span><span class="p">=</span><span class="nv">$true</span><span class="p">)]</span> <span class="nv">$label</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nv">$label</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;red&quot;</span>    <span class="p">{</span> <span class="s2">&quot;~~&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="s2">&quot;green&quot;</span>  <span class="p">{</span> <span class="s2">&quot;**&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="s2">&quot;blue&quot;</span>   <span class="p">{</span> <span class="s2">&quot;*&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">Default</span> <span class="p">{</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">Function</span> <span class="nb">Convert-TableToMarkdown</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Mandatory</span><span class="p">=</span><span class="nv">$true</span><span class="p">)]</span> <span class="nv">$books</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$filePath</span> <span class="p">=</span> <span class="s2">&quot;$PSScriptRoot\result.md&quot;</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$book</span> <span class="k">in</span> <span class="nv">$books</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$wrapper</span> <span class="p">=</span> <span class="nb">Get-WrapperByLabel</span> <span class="nv">$book</span><span class="p">.</span><span class="n">Label</span>
</span><span class='line'>    <span class="s2">&quot;## $wrapper</span><span class="si">$(</span><span class="err">$</span><span class="si">book.Title)</span><span class="s2">$wrapper&quot;</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="n">-FilePath</span> <span class="nv">$filePath</span> <span class="n">-Encoding</span> <span class="n">unicode</span> <span class="n">-Append</span>
</span><span class='line'>    <span class="s2">&quot;&quot;</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="n">-FilePath</span> <span class="nv">$filePath</span> <span class="n">-Encoding</span> <span class="n">unicode</span> <span class="n">-Append</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">$(</span><span class="err">$</span><span class="si">book.Description)</span><span class="s2">&quot;</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="n">-FilePath</span> <span class="nv">$filePath</span> <span class="n">-Encoding</span> <span class="n">unicode</span> <span class="n">-Append</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Head over to https://trello.com/app-key to get this API key</span>
</span><span class='line'><span class="nv">$apiKey</span> <span class="p">=</span> <span class="s2">&quot;LongSequenceOfCharsWhichIsBasicallyAnApiKey&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Use this shortcut for local test code: https://trello.com/1/authorize?expiration=never&amp;scope=read&amp;response_type=token&amp;name=Server%20Token&amp;key=&lt;PASTE_ABOVE_KEY_HERE&gt;</span>
</span><span class='line'><span class="nv">$token</span> <span class="p">=</span> <span class="s2">&quot;EvenLongerSequenceOfCharsWhichIsGuessWhatRightTheToken&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shape the authentication suffix to append to each URI in REST calls</span>
</span><span class='line'><span class="nv">$authSuffix</span> <span class="p">=</span> <span class="s2">&quot;key=$apiKey&amp;token=$token&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get the ID of the target board</span>
</span><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/members/me?boards=open&amp;board_fields=name&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$boardId</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Boards</span> <span class="p">|</span> <span class="n">where</span> <span class="n">name</span> <span class="o">-EQ</span> <span class="s2">&quot;Reading&quot;</span> <span class="p">|</span> <span class="n">select</span> <span class="n">-ExpandProperty</span> <span class="n">id</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get the labels used on the board</span>
</span><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/boards/</span><span class="si">$(</span><span class="err">$</span><span class="si">boardId)</span><span class="s2">?labels=all&amp;label_fields=color&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$labels</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Labels</span> <span class="p">|</span> <span class="nb">Convert-ArrayToHashTable</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get the last list (which contains the items I&#39;m done reading)</span>
</span><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/boards/</span><span class="si">$(</span><span class="err">$</span><span class="si">boardId)</span><span class="s2">?lists=open&amp;list_fields=id,name&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$listId</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Lists</span> <span class="p">|</span> <span class="n">select</span> <span class="n">-Last</span> <span class="n">1</span> <span class="n">-ExpandProperty</span> <span class="n">id</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get the list of cards (necessary fields only)</span>
</span><span class='line'><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s2">&quot;https://api.trello.com/1/lists/</span><span class="si">$(</span><span class="err">$</span><span class="si">listId)</span><span class="s2">?cards=all&amp;card_fields=name,desc,idLabels&amp;$authSuffix&quot;</span> <span class="n">-Method</span> <span class="n">Get</span>
</span><span class='line'><span class="nv">$cards</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="n">Cards</span> <span class="p">|</span> <span class="n">select</span> <span class="err">@</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s2">&quot;Title&quot;</span><span class="err">;</span>       <span class="n">Expression</span><span class="p">={</span><span class="nv">$_</span><span class="p">.</span><span class="n">name</span><span class="p">}},</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s2">&quot;Label&quot;</span><span class="err">;</span>       <span class="n">Expression</span><span class="p">={</span><span class="nv">$labels</span><span class="p">[</span><span class="nv">$_</span><span class="p">.</span><span class="n">idLabels</span><span class="p">[</span><span class="n">0</span><span class="p">]]}},</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">{</span><span class="n">Name</span><span class="p">=</span><span class="s2">&quot;Description&quot;</span><span class="err">;</span> <span class="n">Expression</span><span class="p">={</span><span class="nv">$_</span><span class="p">.</span><span class="n">desc</span><span class="p">}}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Convert-TableToMarkdown</span> <span class="nv">$cards</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S. The <a href="https://trello.com">Trello</a> REST API is clear, concise and well-documented <a href="https://developers.trello.com/reference">here</a>. Great job!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSTS and TeamCity Commit Status Publisher]]></title>
    <link href="http://yansklyarenko.github.io/blog/2017/11/06/vsts-and-teamcity-commit-status-publisher/"/>
    <updated>2017-11-06T22:24:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2017/11/06/vsts-and-teamcity-commit-status-publisher</id>
    <content type="html"><![CDATA[<p>Some time ago VSTS team added a feature called <a href="https://docs.microsoft.com/en-us/vsts/release-notes/2017/aug-04-team-services#pull-request-status-extensibility-in-public-preview">Pull Request Status Extensibility</a>. It unlocked the door for the external services to post custom statuses to the pull requests created in Git repositories hosted in VSTS. Once the status is posted, it is possible to make a branching policy out of it, and this fact makes it a powerful feature.</p>

<blockquote><p>According to the <a href="https://docs.microsoft.com/en-us/vsts/release-notes/index">VSTS Feature Timeline</a> Pull Request Status Extensibility will arrive in On-Prem TFS 2018 RC1 and future.</p></blockquote>

<p>Fortunately, TeamCity has just added the option to send pull request statuses to its <a href="https://confluence.jetbrains.com/display/TCD10/Commit+Status+Publisher">Commit Status Publisher</a> in the most recent build of the version 2017.2.</p>

<blockquote><p>At the moment of writing this post, the version 2017.2 is still an EAP, and I&rsquo;ll use <a href="https://blog.jetbrains.com/teamcity/2017/11/teamcity-2017-2-eap4-is-available/">2017.2 EAP4</a> as the first build the feature has arrived with.</p></blockquote>

<p>These two pieces assemble in a nice picture where you can host your project in VSTS while keeping the build part entirely in TeamCity. In this post, I&rsquo;ll guide you through the steps required to configure this beautiful setup.</p>

<h2>TeamCity: basic setup of the build project</h2>

<p>To begin with, we&rsquo;ll add <a href="https://confluence.jetbrains.com/display/TCD10/Integrating+TeamCity+with+VCS+Hosting+Services#IntegratingTeamCitywithVCSHostingServices-ConnectingtoVisualStudioTeamServices">a connection to VSTS</a> in TeamCity. It is not required, but helps a lot in the further configuration of VCS root and build features. Navigate to <strong>Administration > &lt;Root Project&gt; > Connections</strong> and click &ldquo;Add Connection&rdquo; button:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/tc_connection.png"></p>

<p>Now, let&rsquo;s create a new build project. Thanks to the connection configured prior to this step, the VCS root configuration is as easy as clicking a Visual Studio icon:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/tc_vcsroot.png"></p>

<p>Choose the repository we&rsquo;d like to target and TeamCity will form the proper clone URL. Note that Branch Specification field is set to watch pull requests too.</p>

<p>For the sake of this demo the build project itself is quite simple: it contains just one build configuration, which in its turn consists of a single PowerShell build step faking the real build process by several seconds sleep. There&rsquo;s also a VCS trigger to run the build on the changes in default branch (<code>+:&lt;default&gt;</code>) as well as pull request merges (<code>+:pull/*/merge</code>).</p>

<p>Finally, we should configure the Commit Status Publisher, which does all the magic. Switch to the Build Feature on the left pane, and click &ldquo;Add Build Feature&rdquo; button:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/tc_commit_status_publisher.png"></p>

<p>Note the checkbox that hides in the Advanced Options view. It should be turned on in order to enable pull request status publishing.</p>

<blockquote><p>Ideally, you should generate another personal access token in VSTS with only <code>Code (status)</code> and <code>Code (read)</code> scopes specified. However, being lazy, I&rsquo;ve just clicked the <strong>magic wand</strong> icon and TeamCity pulled the <strong>all-scopes</strong> access token from the connection.</p></blockquote>

<h2>VSTS: creating a pull request with status from TeamCity</h2>

<p>Now, when we&rsquo;re done with TeamCity configuration, let&rsquo;s go ahead and create a pull request in out VSTS Git repository. When TeamCity detects the change, it starts building the pull request. At the same time, the pull request view in VSTS displays appropriate status:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_pr_status_building.png"></p>

<p>Once the build has completed, the status is refreshed:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_pr_status_success.png"></p>

<p>If you click the link, it navigates to the completed build page in TeamCity:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/tc_pr_success.png"></p>

<h2>VSTS: Make branch policy out of the TeamCity build status</h2>

<p>As long as the external service has published its status to the pull request once, it is possible to configure it to serve as a branch policy for this and all other pull requests in this repository. Let&rsquo;s do this now.</p>

<p>Navigate to the branch policies of the <code>master</code> branch and click &ldquo;Add Service&rdquo; in &ldquo;Require approval from external services&rdquo; section:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_branch_policy.png"></p>

<p>Choose the target service from the dropdown (its name is combined of TeamCity build project and configuration) and modify other options according to your needs. Note that it is possible to configure the service the way it behaves as a normal branch policy. For example, the status can be required and will expire when the source branch gets an update:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_add_service.png"></p>

<p>Finally, click Save and push some other change to the existing pull request. As soon as the pull request is updated, the <code>Status</code> section disappears and a new policy is displayed. It stays in the waiting mode until the TeamCity build is started:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_policy_new.png"></p>

<p>Once the build is started, the policy status changes to <code>Pending</code>:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_policy_building.png"></p>

<p>Finally, when the build is done, it is also reflected on the custom policy status:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_policy_success.png"></p>

<p>Similar to the pull request status behavior, it is possible to click the link and navigate to the build view in TeamCity.</p>

<h2>TeamCity: build normal branches and post the status back to VSTS</h2>

<p>When we merge the pull request, the build of the master branch is triggered in TeamCity. If you switch to the Branches view in VSTS, you can see the <code>In Progress</code> type of icon in the Build column of the master branch:</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_master_building.png"></p>

<p>Once the build is completed, the icon changes to the appropriate state (<code>Success</code> in our case):</p>

<p><img src="http://yansklyarenko.github.io/images/november2017/vsts_master_success.png"></p>

<h2>Conclusion</h2>

<p>In this article, we&rsquo;ve quickly run through the steps required to configure close integration between VSTS Git repository and TeamCity build project. Note that I haven&rsquo;t written a single line of code for this to happen. This setup might be useful for those projects that have extensive build configuration in TeamCity, but would like to benefit from the fantastic pull request user experience in VSTS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ERR_CONNECTION_REFUSED]]></title>
    <link href="http://yansklyarenko.github.io/blog/2015/08/27/err-connection-refused/"/>
    <updated>2015-08-27T22:19:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2015/08/27/err-connection-refused</id>
    <content type="html"><![CDATA[<p>Today I have faced with the problem installing Basic Authentication feature into the Web Server role on Windows 2012 R2. The wizard kept throwing various errors, including scary OutOfMemoryException. A quick googling that has found a suggestion to run <code>netsh http show iplisten</code> and add 127.0.0.1 (aka Home Sweet Home) to the list if it&rsquo;s not there. I gave it a try without giving it a thought first.</p>

<p>The initial problem has not been solved &ndash; the wizard kept failing to add that feature, and I finally resolved it with the mighty PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Import-Module</span> <span class="n">ServerManager</span>
</span><span class='line'><span class="nb">Add-WindowsFeature</span> <span class="n">Web-Basic-Auth</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later on I had to browse for a website hosted on that server, and I suddenly saw <em>This webpage is not available</em> message. Hmm&hellip; First off, I&rsquo;ve verified that the website works locally &ndash; and it did. This gave me another hint and I checked whether the bindings are set up correctly. And they were! Finally, I started to think that it&rsquo;s Basic Authentication feature to blame &ndash; yeah, I know, that was a stupid assumption, but hey, stupid assumptions feel very comfortable for brain when it faces with the magic&hellip;</p>

<p>Anyway, fortunately I recalled that quick dumb action I did with netsh, and the magic has immediately turned into the dust, revealing someone&rsquo;s ignorance&hellip; Turns out, if <code>iplisten</code> does not list anything, it means listen to everything, any IP address. When you add something there, it starts listening to that IP address only.</p>

<p>Thus, it was all resolved by deleting 127.0.0.1 from that list with <code>netsh http delete iplisten ipaddress=127.0.0.1</code>.</p>

<p>Want some quick conclusion? <strong>Think first, then act!!!</strong></p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build queue starvation in CC.NET]]></title>
    <link href="http://yansklyarenko.github.io/blog/2014/11/24/build-queue-starvation-in-cc-dot-net/"/>
    <updated>2014-11-24T22:54:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2014/11/24/build-queue-starvation-in-cc-dot-net</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve come across an interesting behavior in CruiseControl.NET in regards to the build queues and priorities.</p>

<p>If there are many projects on one server, and the server it not quite powerful, and more than one build queue is configured, and (that&rsquo;s the last one) these build queues have different priorities, you might end up in a situation when CC.NET checks for modifications the same set of projects all over again, and never starts an actual build. If you add the projects from that server to the CCTray, you can observe the number of projects queued for the build has reached a certain number and never decreases.</p>

<p>This phenomenon is call &ldquo;build queue starvation&rdquo;. It was <a href="http://www.damirscorner.com/AvoidingQueueStarvationInCruiseControlNET.aspx">described and explained by Damir Arh in his blog</a>.</p>

<p>Let me summarize the main idea.</p>

<p>When one build queue has a higher priority than another queue, CC.NET favors the projects from the first queue when scheduling for modifications check. Now imagine that a trigger of the projects from the higher priority queue is quite small and the number of such projects is big enough. This leads to the situation when the first project in high priority queue is scheduled for build the second round before the last project in that queue has built its first time.</p>

<p>As a result, the lower priority queue is &ldquo;starving&rdquo; &ndash; none of its projects ever gets a chance to be built. The fix suggested in the link above suits my needs &ndash; the trigger interval has just been increased.</p>

<p>I should say it&rsquo;s not easy to google that if you&rsquo;re not familiar with the term &ldquo;build queue starvation&rdquo;. Besides, CC.NET doesn&rsquo;t feel bad in this situation, and hence doesn&rsquo;t help with any warnings &ndash; it just does its job iterating the queue and following the instructions.</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up an existing blog on Octopress]]></title>
    <link href="http://yansklyarenko.github.io/blog/2014/08/01/setting-up-an-existing-blog-on-octopress/"/>
    <updated>2014-08-01T00:18:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2014/08/01/setting-up-an-existing-blog-on-octopress</id>
    <content type="html"><![CDATA[<p>Ok, it took me some time and efforts to set up the environment for blogging. Consider this post as a quick instruction to myself for the next time I&rsquo;ll have to do this.</p>

<p>So, there&rsquo;s an existing blog created with <a href="http://octopress.org/">Octopress</a>, hosted on <a href="https://github.com/">Github</a>. The task is to setup a brand new machine to enable smooth blogging experience.</p>

<blockquote><p>Note: just in case you have to create a blog from scratch, follow the official <a href="http://octopress.org/docs/setup/">Octopress docs</a>, it&rsquo;s quite clear.</p></blockquote>

<p>First of all, you should install Ruby. Octopress docs recommend using either rbenv or RVM for this. Both words sound scary, hence don&rsquo;t hesitate to take the easy path and download an installer from <a href="http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-1.9.3-p545.exe?direct">here</a>. At the last page of the installation wizard, choose to add Ruby binaries to the <code>PATH</code>:</p>

<p><img src="http://yansklyarenko.github.io/images/july2014/install_ruby.png"></p>

<p>When installer completes, check the installed version:</p>

<pre><code>ruby --version
</code></pre>

<p>Then, clone the repo with the blog from Github. Instead of calling <code>rake setup_github_pages</code> as suggested by the Octopress docs, follow these steps found <a href="http://tech.paulcz.net/2012/12/creating-a-github-pages-blog-with-octopress.html">here</a>. Let&rsquo;s assume we&rsquo;ve done that into <code>blog</code> folder:</p>

<pre><code>git clone git@github.com:username/username.github.com.git blog
cd blog
git checkout source
mkdir _deploy
cd _deploy
git init
git remote add origin git@github.com:username/username.github.com.git
git pull origin master
cd ..
</code></pre>

<p>Now do the following:</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>This should pull all the dependencies required for the Octopress engine. Here&rsquo;s where I faced with the first inconsistency in the docs &ndash; one of the dependencies (fast-stemmer) fails to install without <a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">the DevKit</a>. Download it and run the installer. The installation process is documented <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">here</a>, but the quickest way is:</p>

<ul>
<li>self-extract the archive</li>
<li><code>cd</code> to that folder</li>
<li>run <code>ruby dk.rb init</code></li>
<li>then run <code>ruby dk.rb install</code></li>
</ul>


<p>After this, re-run the <code>bundle install</code> command.</p>

<p>Well, at this point you should be able to create new posts with <code>rake new_post[title]</code> command. Generate the resulting HTML with <code>rake generate</code> and preview it with <code>rake preview</code> to make sure it produces what you expect.</p>

<p><strong><em>An important note about syntax highlighting</em></strong></p>

<p>Octopress uses <a href="http://pygments.org/">Pygments</a> to highlight the code. This is a <a href="https://www.python.org/">Python</a> thing, and obviously you should install Python for this to work. Choose <a href="https://www.python.org/ftp/python/2.7.8/python-2.7.8.msi">2.x version of Python</a> &ndash; the 3.x version doesn&rsquo;t work. This is important: you won&rsquo;t be able to generate HTML from MARKDOWN otherwise.</p>

<p>That&rsquo;s it! Hope this will save me some time in future.</p>

<blockquote><p>And by the way, this all is written with <a href="https://stackedit.io/">StackEdit</a> &ndash; a highly recommended online markdown editor.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate attachments from OnTime to TFS]]></title>
    <link href="http://yansklyarenko.github.io/blog/2014/07/31/migrate-attachments-from-ontime-to-tfs/"/>
    <updated>2014-07-31T23:32:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2014/07/31/migrate-attachments-from-ontime-to-tfs</id>
    <content type="html"><![CDATA[<p>When you move from one bug tracking system to another, the accuracy of the process is very important. A single missing point can make a work item useless. An attached image is often worth a thousand words. Hence, today&rsquo;s post is about migrating attachments from <a href="http://www.axosoft.com/">OnTime</a> to <a href="http://en.wikipedia.org/wiki/Team_Foundation_Server">TFS</a>.</p>

<blockquote><p>NOTE: The samples in this post rely on OnTime SDK, which was replaced by a <a href="http://developer.axosoft.com/api">brand new REST API</a>.</p></blockquote>

<p>OnTime SDK is a set of web services, and each &ldquo;area&rdquo; is usually covered by one or a number of web services. The operations with attachments are grouped in <code>/sdk/AttachmentService.asmx</code> web service.</p>

<p>So, the first thing to do is to grab all attachments of the OnTime defect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">rawAttachments</span> <span class="p">=</span> <span class="n">_attachmentService</span><span class="p">.</span><span class="n">GetAttachmentsList</span><span class="p">(</span><span class="n">securityToken</span><span class="p">,</span> <span class="n">AttachmentSourceTypes</span><span class="p">.</span><span class="n">Defect</span><span class="p">,</span> <span class="n">defect</span><span class="p">.</span><span class="n">DefectId</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method returns a <code>DataSet</code>, and you&rsquo;ll have to enumerate its rows to grab the useful data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">attachments</span> <span class="p">=</span> <span class="n">rawAttachments</span><span class="p">.</span><span class="n">Tables</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">AsEnumerable</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">attachment</span> <span class="k">in</span> <span class="n">attachments</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// wi is a TFS work item object</span>
</span><span class='line'>  <span class="n">wi</span><span class="p">.</span><span class="n">Attachments</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">GetAttachment</span><span class="p">(</span><span class="n">attachment</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s take a look at the <code>GetAttachment</code> method, which actually does the job. It accepts the <code>DataRow</code>, and returns the TFS <code>Attachment</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="n">Attachment</span> <span class="nf">GetAttachment</span><span class="p">(</span><span class="n">DataRow</span> <span class="n">attachmentRow</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">onTimeAttachment</span> <span class="p">=</span> <span class="n">_attachmentService</span><span class="p">.</span><span class="n">GetByAttachmentId</span><span class="p">(</span><span class="n">securityToken</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">attachmentRow</span><span class="p">[</span><span class="s">&quot;AttachmentId&quot;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">var</span> <span class="n">tempFile</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">GetTempPath</span><span class="p">(),</span> <span class="n">onTimeAttachment</span><span class="p">.</span><span class="n">FileName</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">File</span><span class="p">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">tempFile</span><span class="p">))</span>
</span><span class='line'>    <span class="n">File</span><span class="p">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">tempFile</span><span class="p">);</span>
</span><span class='line'>  <span class="n">File</span><span class="p">.</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="n">tempFile</span><span class="p">,</span> <span class="n">onTimeAttachment</span><span class="p">.</span><span class="n">FileData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Attachment</span><span class="p">(</span><span class="n">tempFile</span><span class="p">,</span> <span class="n">onTimeAttachment</span><span class="p">.</span><span class="n">Description</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Couple of things to notice here:</p>

<ul>
<li>you have to call another web method to pull binary data of the attachment</li>
<li>OnTime attachment metadata is rather useful and can be moved as is to TFS, for instance, attachment description</li>
</ul>


<p>Finally, when a new attachment is added to the TFS work item, &ldquo;increment&rdquo; the <code>ChangedDate</code> of the work item before saving it. The TFS server often refuses saving work item data in case the previous revision has exactly the same date/time stamp. Like this (always works):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">wi</span><span class="p">[</span><span class="n">CoreField</span><span class="p">.</span><span class="n">ChangedDate</span><span class="p">]</span> <span class="p">=</span> <span class="n">wi</span><span class="p">.</span><span class="n">ChangedDate</span><span class="p">.</span><span class="n">AddSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'><span class="n">wi</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope it&rsquo;s useful. Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAnt <copy> task behaves differently in 0.92 and prior versions]]></title>
    <link href="http://yansklyarenko.github.io/blog/2013/01/03/nant-task-behaves-differently-in-092/"/>
    <updated>2013-01-03T11:35:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2013/01/03/nant-task-behaves-differently-in-092</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">If you need to copy a folder together with all its contents to another folder in NAnt, you would typically write something like this:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:4960f8c7-91c0-4ec8-8979-ab0fde40976f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;wrap-lines:false;">&lt;copy todir="${target}"&gt;<br />  &lt;fileset basedir="${source}" /&gt;<br />&lt;/copy&gt;</pre></div>It turns out this code works correctly in NAnt 0.92 Alpha and above. The output is expected:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:871b39e6-e873-499d-bcab-3017221ef94f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">[copy] Copying 1 directory to '...'.</pre></div>However, the same code doesn’t work in prior versions of NAnt, for instance, 0.91. The output is as follows (only in –debug+ mode):<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:52c67d5f-bfa3-485c-b3e4-c2ec64294d6e" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">[copy] Copying 0 files to '...'.</pre></div>Obviously, <a href="https://github.com/nant/nant/issues/11" target="_blank">the issue was fixed in 0.92</a>, so the best recommendation would be to upgrade NAnt toolkit. However, if this is not an option for some reason, the following code seems to work correctly for any version:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:566e2066-71ca-4983-a0b5-40d35ce3f5bb" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">&lt;copy todir="${target}"&gt;<br />  &lt;fileset basedir="${source}"&gt;<br />    &lt;include name="**/*" /&gt;<br />  &lt;/fileset&gt;<br />&lt;/copy&gt;</pre></div>Hope this saves you some time.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Possible source of the signtool 'bad format' 0x800700C1 problem]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/11/19/possible-source-of-signtool-bad-format/"/>
    <updated>2012-11-19T17:26:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/11/19/possible-source-of-signtool-bad-format</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Today I have faced with a weird problem. The operation to sign the EXE file (actually, an installation package) with a valid certificate failed with the following error:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:bc6106fa-3bf6-4da8-a4b3-7f14ff86ba80" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">[exec] SignTool Error: SignedCode::Sign returned error: 0x800700C1<br />[exec] Either the file being signed or one of the DLL specified by /j switch is not a valid Win32 application.<br />[exec] SignTool Error: An error occurred while attempting to sign: D:\output\setup.exe</pre></div>This kind of error is usually an indication of a format incompatibility, <a href="http://technet.microsoft.com/en-us/library/cc782541(WS.10).aspx" target="_blank">when the bitness of the signtool.exe and the bitness of the EXE in question don&#8217;t correspond</a>. However, this was not the case.<br /><br />It turns out that the original EXE file was generated incorrectly because of the lack of disk space. That&#8217;s why it was broken and was recognized by the signtool like a bad format file. After disk cleanup everything worked perfectly and the EXE file was signed correctly.<br /><br />Hope this saves someone some time. </div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A solution can build fine from inside the Visual Studio, but fail to build with msbuild.exe]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/10/29/a-solution-can-build-fine-from-inside/"/>
    <updated>2012-10-29T16:35:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/10/29/a-solution-can-build-fine-from-inside</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Today I have faced with an interesting issue. Although I failed to reproduce it on a fresh new project, I think this info might be useful for others.<br />I have a solution which was upgraded from targeting .NET Framework 2.0 to .NET Framework 3.5. I’ve got a patch from a fellow developer to apply to one of the projects of that solution. The patch adds new files as well as modifies existing ones. After the patch application, the solution is successfully built from inside the Visual Studio, but fails to build from the command line with msbuild.exe. The error thrown states that <br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5c70df5d-f802-466e-9713-c35fabc6dfbb" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">“The type or namespace name 'Linq' does not exist in the namespace 'System' ”. </pre></div>The msbuild version is 3.5:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5d034399-054f-4ebd-aabb-73bf9dab56bf" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[exec] Microsoft (R) Build Engine Version 3.5.30729.5420<br />[exec] [Microsoft .NET Framework, Version 2.0.50727.5456]<br />[exec] Copyright (C) Microsoft Corporation 2007. All rights reserved.</pre></div>It turns out <a href="http://connect.microsoft.com/VisualStudio/feedback/details/665406/using-system-linq-without-reference-to-system-core-compiles-in-vs-but-not-with-msbuild-exe" target="_blank">this issue has been met by other people</a>, and even reported to Microsoft. Microsoft suggested to use MSBuild.exe 4.0 to build VS 2010 projects. However, they confirmed it is possible to use MSBuild.exe 3.5&nbsp; - in this case a reference to System.Core (3.5.0.0) must be explicitly added to the csproj file.<br />If you try to add a reference to System.Core from inside the Visual Studio, you’ll get the error saying:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d25d09ad-d4a7-4cd3-8b89-6959ec9d1e60" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">"A reference to 'System.Core' could not be added. This component is already automatically referenced by the build system"</pre></div>So, it seems that when you build a solution from inside the Visual Studio, it is capable to automatically load implicitly referenced assemblies. I suppose, MSBuild.exe 4.0 (and even SP1-patched MSBuild.exe 3.5?) can do this as well. Apparently, this has also <a href="http://blog.rlucas.net/bugfix/force-a-reference-to-system-core-in-visual-studio-2010/" target="_blank">turned out to be a known problem</a> – you can’t add that reference from the IDE. Open csproj file in your favorite editor and add this:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:cd2bda3a-a055-467e-85d3-7913a99c7de4" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">&lt;Reference Include="System.Core" /&gt;</pre></div>After this, the project builds fine in both VS and MSBuild.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default attribute values for custom NAnt tasks]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/08/15/default-attribute-values-for-custom/"/>
    <updated>2012-08-15T16:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/08/15/default-attribute-values-for-custom</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">When you create custom <a href="http://nant.sourceforge.net/">NAnt</a> tasks, you can specify various task parameter characteristics, such as whether it is a required attribute, how it validates its value, etc. This is done via the custom attributes in .NET, for example: <br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:035f0705-3d6e-49d1-b4f6-f204a32b007f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[TaskAttribute("param", Required = true), StringValidator(AllowEmpty = false)]<br />public string Param { get; set; }</pre></div>It might be a good idea to be able to specify a default value for a task parameter the similar way, for instance:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:ab15929c-f17e-4af8-a9f7-002707f23da4" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[TaskAttribute("port"), Int32Validator(1000, 65520), DefaultValue(16333)]<br />public int Port { get; set; }</pre></div>Let’s examine the way it can be implemented. First of all, let’s define the custom attribute for the default value:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:9610860a-ef97-4b43-b9fb-53404ae7af97" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">/// &lt;summary&gt;<br />/// The custom attribute for the task attribute default value<br />/// &lt;/summary&gt;<br />public class DefaultValueAttribute : Attribute<br />{<br />  public DefaultValueAttribute(object value)<br />  {<br />    this.Default = value;<br />  }<br /><br />  public object Default { get; set; }<br />}</pre></div>I suppose the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx">standard .NET DefaultValueAttribute</a> can be used for this purpose as well, but the one above is very simple and is good for this sample. Note also that in this situation we could benefit from the generic custom attributes, <a href="http://stackoverflow.com/questions/294216/why-does-c-sharp-forbid-generic-attribute-types">which unfortunately are not supported in C#, although are quite valid for CLR</a>.<br /><br />Now, when the attribute is defined, let’s design the way default values will be applied at runtime. For this purpose we’ll have to define a special base class for all our custom tasks we’d like to use default values technique:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d0e399ab-d366-4d25-babe-725de7760c30" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">public abstract class DefaultValueAwareTask : Task<br />{<br />  protected override void ExecuteTask()<br />  {<br />    this.SetDefaultValues();<br />  }<br /><br />  protected virtual void SetDefaultValues()<br />  {<br />    foreach (var property in GetPropertiesWithCustomAttributes&lt;DefaultValueAttribute&gt;(this.GetType()))<br />    {<br />      var attribute = (TaskAttributeAttribute)property.GetCustomAttributes(typeof(TaskAttributeAttribute), false)[0];<br />      var attributeDefaultValue = (DefaultValueAttribute)property.GetCustomAttributes(typeof(DefaultValueAttribute), false)[0];<br /><br />      if (attribute.Required)<br />      {<br />        throw new BuildException("No reason to allow both to be set", this.Location);<br />      }<br /><br />      if (this.XmlNode.Attributes[attribute.Name] == null)<br />      {<br />        property.SetValue(this, attributeDefaultValue.Default, null);<br />      }<br />    }<br />  }<br /><br />  private static IEnumerable&lt;PropertyInfo&gt; GetPropertiesWithCustomAttributes&lt;T&gt;(Type type)<br />  {<br />    return type.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance).Where(property =&gt; property.GetCustomAttributes(typeof(T), false).Length &gt; 0);<br />  }<br />}</pre></div>Let’s examine what this code actually does. The key method here is SetDefaultValues(). It iterates through the task parameters (the public properties marked with DefaultValueAttribute attribute) of the class it is defined in and checks whether the value carried by the DefaultValueAttribute should be set as a true value of the task parameter. It is quite simple: if the XmlNode of the NAnt task definition doesn’t contain the parameter in question, it means a developer didn’t set it explicitly, and it is necessary to set a default value. Moreover, if the task parameter is marked as Required and has a default value at the same time, this situation is treated as not appropriate and the exception is thrown.<br /><br />Obviously, when a custom NAnt task derives from the DefaultValueAwareTask, it has to call base.ExecuteTask() at the very start of its ExecuteTask() method implementation for this technique to work.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate a solution file for a number of C# projects files in a folder]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/07/06/generate-solution-file-for-number-of-c/"/>
    <updated>2012-07-06T14:59:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/07/06/generate-solution-file-for-number-of-c</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Some time ago I wrote my first T4 template which generates a solution (*.sln) file out of a number of C# project (*.cspoj) files, located in a folder and all descendants. Although it turned out not to be necessary to solve the task I was working on, and assuming it’s quite simple, I still decided to share it for further reference. May someone can find it useful. So, below is the entire T4 template, with no extra comments:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:260cba0a-462d-4da5-bf82-2a4da7bd7cdf" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;gutter:false;wrap-lines:false;">Microsoft Visual Studio Solution File, Format Version 11.00<br /># Visual Studio 2010<br />&lt;#@ template language="cs" hostspecific="false" #&gt;<br />&lt;#@ output extension=".sln" #&gt;<br />&lt;#@ parameter name="Folder" type="System.String" #&gt; <br />&lt;#@ assembly name="System.Core" #&gt;<br />&lt;#@ assembly name="System.Xml" #&gt;<br />&lt;#@ assembly name="System.Xml.Linq" #&gt;<br />&lt;#@ import namespace="System.IO" #&gt;<br />&lt;#@ import namespace="System.Linq" #&gt;<br />&lt;#@ import namespace="System.Xml.Linq" #&gt; <br />&lt;#<br />    if (Directory.Exists(Folder))<br />    {<br />        var csprojFiles= Directory.GetFiles(Folder, "*.csproj", SearchOption.AllDirectories);<br />        foreach (var file in csprojFiles)<br />        {<br />            ProjectFileMetaData metaData = new ProjectFileMetaData(file, Folder);<br />            WriteLine("Project(\"{3}\") = \"{0}\", \"{1}\", \"{2}\"",  metaData.Name, metaData.Path, metaData.Id, ProjectFileMetaData.ProjectTypeGuid);<br />            WriteLine("EndProject");<br />        }<br />    }<br />#&gt;<br /><br />&lt;#+ <br />    public class ProjectFileMetaData<br />    {<br />        public static string ProjectTypeGuid = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";<br /><br />        public ProjectFileMetaData(string file, string root)<br />        {<br />            InitProperties(file, root);<br />        }<br /><br />        public string Name { get; set; }<br /><br />        public string Path { get; set; }<br /><br />        public string Id { get; set; }<br /><br />        private void InitProperties(string file, string root)<br />        {<br />            XDocument xDoc = XDocument.Load(file);<br />            XNamespace ns = @"http://schemas.microsoft.com/developer/msbuild/2003";<br />            XElement xElement = xDoc.Root.Elements(XName.Get("PropertyGroup", ns.NamespaceName)).First().Element(XName.Get("ProjectGuid", ns.NamespaceName));<br />            if (xElement != null)<br />            {<br />                this.Id = xElement.Value;<br />            }<br /><br />            this.Path = file.Substring(root.Length).TrimStart(new char[] { '\\' });<br /><br />            this.Name = System.IO.Path.GetFileNameWithoutExtension(file);<br />        }<br />    }<br />#&gt;</pre></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple batch script to dump the contents of the folder and its subfolders recursively]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/03/02/simple-batch-script-to-dump-contents-of/"/>
    <updated>2012-03-02T11:13:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/03/02/simple-batch-script-to-dump-contents-of</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">This topic might seem too minor for a blog post. You can argue that it’s covered by a simple call to a <strong><a href="http://ss64.com/nt/dir.html">dir /s</a></strong> command. Well, that’s true unless you need to perform some actions with each line in the list. In this case it could be tricky if you do not use BATCH files on a daily basis. <br />Imagine you need to dump the file paths in a folder and its subfolders to a plain list. Besides, you’d like to replace the absolute path prefix with UNC share prefix, because each path contains a shared folder and each file will be accessible from inside the network. So, here goes the script:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5c4445c5-847e-4642-8167-0397b2755daa" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: vb;">@echo off<br />set _from=*repo<br />set _to=\\server\repo<br />FOR /F "tokens=*" %%G IN ('dir /s /b /a:-D /o:-D') DO (CALL :replace %%G) &gt;&gt; files.txt<br />GOTO :eof<br /><br />:replace<br /> set _str=%1<br /> call set _result=%%_str:%_from%=%_to%%%<br /> echo %_result%<br />GOTO :eof</pre></div><br />Let’s start from the <a href="http://ss64.com/nt/for_cmd.html">FOR</a> loop. This version of the command loops through the output of another command, in this case, dir. Essentially, we ask dir to run recursively (/s), ignore directories (/a:-D), sort by date/time, newest first (/o:-D) and output just the basic information (/b). And the FOR command works on top of this, iterating all lines of dir output (tokens=*), calling a subroutine :replace for each line and streaming the final result into files.txt.<br /><br />The subroutine does a very simple thing – it replaces one part of the string with another. Let’s step through it anyway. First, it gets the input parameter (%1) and saves it into _str variable. I suppose %1 could be used as is in the expression below, but the number of ‘%’ signs drives me crazy even without it. The next line is the most important – it does the <a href="http://ss64.com/nt/syntax-replace.html">actual replacement job</a>. I’ll try to explain all these % signs: the variable inside the expression must be wrapped with % (like _from and _to); the expression itself should go between % and % as if it’s a variable itself. And the outermost pair of % is there for escaping purpose, I suppose – you will avoid it if you use just string literals for tokens in expression. Note also the usage of the <a href="http://ss64.com/nt/call.html">CALL SET statement</a>. Finally, the last line of the subroutine echoes the result.<br /><br />There’s one last point worth attention. The _from variable, which represents the token to replace, contains a * sign. It means “replace ‘repo’ and everything before it” in the replace expression.<br /><br />The best resource I found on the topic is <a href="http://ss64.com/nt/">http://ss64.com/nt/</a>.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisited: Multiple Instance installations and patches]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance/"/>
    <updated>2011-09-14T23:00:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I initially <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">blogged about multiple instance installations</a> couple of years ago. The way I described it worked fine for me, but the time flies and the things has changed ever since – WiX grew up to even more solid toolset, and I also gained some knowledge. So, this post is to revisit the topic and look at it through the prism of WiX 3.6.<br />Imagine you have an application, and you’d like to be able to install several instances of it side-by-side on a single machine. The starting point is still to author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_instancetransforms.htm">InstanceTransforms</a> element: <pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;   <br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;   <br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;   <br />   &lt;Instance Id="I03" ProductCode="{GUIDGOES-HERE-5494-843B-BC07BBC022DB}" ProductName="My Product 03"/&gt;<br />    ...<br />&lt;/InstanceTransforms&gt;</pre>Obviously, the number of Instance elements is the number of instances supported by this installation program (plus the default one). In order to install the default instance, you should run the following command (assuming the generated MSI package is called MultiInstance.msi): <pre class="brush:csharp">msiexec /i MultiInstance.msi</pre>In order to start the installation of another instance, change the command as follows: <pre class="brush:csharp">msiexec /i MultiInstance.msi MSINEWINSTANCE=1 TRANSFORMS=":I01"</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa370326.aspx">MSINEWINSTANCE</a> property set to 1 instructs msiexec to start the installation of another instance instead of default one. Note that in the above example we installing the instance I01. The Instance element results into an <a href="http://msdn.microsoft.com/en-us/library/aa369528.aspx">instance transform</a> being embedded into the MSI package, and by setting <a href="http://msdn.microsoft.com/en-us/library/aa372085.aspx">TRANSFORMS</a> property to “:I01” we instruct msiexec to apply the embedded instance transform which corresponds to the I01 instance. The TRANSFORMS property can contain other transforms (for instance, language transforms), but that’s another topic.<br/><br/>Uninstalling looks quite similar, for instance, default instance uninstallation: <pre class="brush:csharp">msiexec /x MultiInstance.msi</pre>In order to uninstall the extra instance, you should explicitly specify its ProductCode. So, for instance I01 the uninstall command line looks like this: <pre class="brush:csharp">msiexec /x {GUIDGOES-HERE-4731-8DAA-9E843A03D482}</pre>So far, so good – it is quite straight-forward. Now, let’s turn to the <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">Windows Installer documentation about multiple instances</a> one more time. Apart from the requirement for each instance to have a unique product code and instance identifier (this is what WiX does for free with InstanceTransforms technique), it strongly recommends to keep the data isolated. For the file data, this means installing the files of each instance to a different location – the path containing instance ID as its part fits best. For the non-file data, it’s a bit more complex: the appropriate components should have different GUIDs, and again install to a different location. <br /><br/>In <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my first attempt to approach the problem</a>, I’ve applied a workaround: generate new GUIDs for each component of new instance, embed those “component transforms” into the resulting MSI and apply along with the instance transform. Well, sounds not very efficient, but assuming a great number of components harvested automatically, this was simple enough. Fortunately, wise developers of WiX team thought this through and came up with a far more elegant solution in version 3.6.<br /><br/>Starting from <a href="http://wix.sourceforge.net/releases/3.6.1502.0/">WiX 3.6.1502.0</a>, a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_component.htm">Component</a> element has an attribute MultiInstance of YesNo type. According to the WiX docs, “If this attribute is set to &#8216;yes&#8217;, a new Component/@Guid will be generated for each instance transform.” Fantastic! That’s what we need! Let’s see how it affects the multiple instance installations on a sample. Let’s say our installation program consists of the following components, and we’d like to be able to install this software at least 3 times: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre><pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;<br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;<br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;<br />&lt;/InstanceTransforms&gt;</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">MSDN recommendations about multiple instances</a> are followed, except for “keeping non-file data isolated”. Let’s see how it affects the install/uninstall. Run the installation of the default and I01 instance as described above. Both instances are installed to the different locations correctly:<br /><a href="http://lh4.ggpht.com/-kNoOE7Xgkpw/TnEDOVFxiDI/AAAAAAAAAc0/xDKdDlmf2-A/s1600-h/Instance00installed%25255B3%25255D.png"><img alt="Instance00installed" border="0" height="184" src="http://lh5.ggpht.com/-f-y_ymDDpsg/TnEDPFQTf5I/AAAAAAAAAc4/csVuv73w6Sc/Instance00installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00installed" width="683" /></a><a href="http://lh6.ggpht.com/-zBD-8Nbj_JI/TnEDPmI-ZxI/AAAAAAAAAc8/0z3a4i7fM50/s1600-h/Instance00RegInstalled%25255B3%25255D.png"><img alt="Instance00RegInstalled" border="0" height="248" src="http://lh3.ggpht.com/-02O4l8thb74/TnEDQGZV0vI/AAAAAAAAAdA/K2wTQXmZC6E/Instance00RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegInstalled" width="1076" /></a><br /><br /><a href="http://lh3.ggpht.com/-x9bhH2JcruA/TnEDQignM9I/AAAAAAAAAdE/pKGT89S6oZ0/s1600-h/Instance01installed%25255B3%25255D.png"><img alt="Instance01installed" border="0" height="186" src="http://lh6.ggpht.com/-cvLMQCx_o6o/TnEDRvly36I/AAAAAAAAAdI/wUbopNkDXM0/Instance01installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01installed" width="680" /></a><a href="http://lh3.ggpht.com/-siDWeoSZNXk/TnEDSF2Fx4I/AAAAAAAAAdM/TlKGNa3QMkk/s1600-h/Instance01RegInstalled%25255B3%25255D.png"><img alt="Instance01RegInstalled" border="0" height="248" src="http://lh6.ggpht.com/-biKeu4p_i_E/TnEDS_RZh0I/AAAAAAAAAdQ/wx4_Pnv-wkk/Instance01RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01RegInstalled" width="1076" /></a><br /><br />Now uninstall the default instance – you’ll see that non-file data was not removed properly:<br /><br /><a href="http://lh6.ggpht.com/-0AhXVNeVdgg/TnEDTVJjUXI/AAAAAAAAAdU/cdHC2RG-Ihs/s1600-h/Instance00broken%25255B3%25255D.png"><img alt="Instance00broken" border="0" height="144" src="http://lh3.ggpht.com/-U9e8M0FckmA/TnEDT5ySS2I/AAAAAAAAAdY/YQbr_a5y3uI/Instance00broken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00broken" width="679" /></a><a href="http://lh6.ggpht.com/-NzZrS2kAE3Q/TnEDURgH01I/AAAAAAAAAdc/AMxJ_8cBoBI/s1600-h/Instance00RegBroken%25255B3%25255D.png"><img alt="Instance00RegBroken" border="0" height="248" src="http://lh4.ggpht.com/-H55eKBQLubA/TnEDVKHy9TI/AAAAAAAAAdg/UVGYp9G2WAI/Instance00RegBroken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegBroken" width="1076" /></a><br /><br />This is happening because the components which hold this data are considered shared by the Windows Installer, and during uninstallation of one instance it detects that there’s another one pointing to the same components and leaves those untouched. Now if you uninstall the other instance, it successfully removes both EmptyFolder and registry key, but as a result we’ll still have orphaned resources of the first instance.<br /><br />That’s the initial problem, and let’s see how elegant new WiX feature deals with it. You should only add the MultiInstance=’yes’ attribute to the components holding non-file data, and forget about the problem of orphaned resources forever. Like this: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}" MultiInstance="yes"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}" MultiInstance="yes"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre>Now check the above scenario once again: install 2 instances and uninstall them. You’ll see that both install correctly and uninstall clearly. Isn’t it GREAT?! <img alt="Smile" class="wlEmoticon wlEmoticon-smile" src="http://lh4.ggpht.com/-Q_cR2rTJMrk/TnED307vexI/AAAAAAAAAdk/KCBp9wAo2vQ/wlEmoticon-smile%25255B2%25255D.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /><br /><br />Now, let’s turn to patching. Again, if we look back to <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my initial post on this topic</a>, I was using an ugly method to make the patch applicable for all instances of the installed product. That method assumed opening the binary patch for read/write and rude injection into its structure. Though it worked, there’s much more elegant way of doing this. I’d like to thank <a href="http://blogs.msdn.com/b/heaths/">Heath Stewart</a> for the hint – here’s the <a href="http://www.mail-archive.com/wix-users@lists.sourceforge.net/msg27696.html">full thread on wix-users mailing list</a>.<br /><br />So, the default behavior is the following: if you author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_patchbaseline.htm">PatchBaseline</a> element with its default validation settings, the patch will be applicable to the default instance only. That’s because it tracks the ProductCode is the product baseline it was built against, and checks it during install time. The trick is to add a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_validate.htm">Validate</a> child to the PatchBaseline, and instruct it not to check the ProductCode: <pre class="brush:xml">&lt;Media Id="5000" Cabinet="RTM.cab"&gt;<br />   &lt;PatchBaseline Id="RTM"&gt;<br />      &lt;Validate ProductId="no" /&gt;<br />   &lt;/PatchBaseline&gt;<br />&lt;/Media&gt;</pre>So, after you build this patch, you’ll be able to apply it to a particular instance: <pre class="brush:csharp">msiexec /i {GUIDGOES-HERE-4412-9BC2-17DAFFB00D20} PATCH=patch.msp /l*v patch.log</pre>Or to all the installed instances at once (so-called “double-click scenario”): <pre class="brush:csharp">msiexec.exe /p patch.msp /l*vx patch.log</pre>There’s still one more obvious inconvenience in the patch authoring, as for me. You have to specify the ProductCode entries twice: in the main installation sources (InstanceTransform/@ProductCode) and in the patch sources (TargetProductCode/@Id). It would be just fantastic if during patch building the WiX tools could look into the instance transforms collection of the baseline package and take the list of product codes out of there. That would omit the necessity to always specify the following section in the patch: <pre class="brush:xml">&lt;TargetProductCodes Replace="no"&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4412-9BC2-17DAFFB00D20}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" /&gt;<br />&lt;/TargetProductCodes&gt;</pre>As usual, WiX Toolset developers have done and keep doing fantastic job making our lives as setup developers easier! <br /><br />Feel free to leave a comment in case you have a note or a question. Feedback is welcome, as usual!</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to dotNetInstaller: the odd Basic UI]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/02/24/moving-to-dotnetinstaller-odd-basic-ui/"/>
    <updated>2011-02-24T18:36:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/02/24/moving-to-dotnetinstaller-odd-basic-ui</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In the <a href="http://ysdevlog.blogspot.com/2011/02/moving-to-dotnetinstaller-launch.html">previous post</a>, I’ve outlined how to emulate the launch conditions behavior in dotNetInstaller. In that article I have also emphasized the importance of turning the UI into the Basic mode. It is necessary in order to avoid extra dialogs which require user interaction. If you followed the scenario I described, you might notice a strange behavior of the BasicUI mode: <strong><span >the message boxes disappear without any user participation</span></strong>. I thought it’s be a kind of a bug, but it was done on purpose. Take a look at this code (taken from dotNetInstaller sources):</p>  <pre class="code"><span style="color: blue">int </span>DniMessageBox::Show(<span style="color: blue">const </span>std::wstring&amp; p_lpszText, UINT p_nType <span style="color: green">/*=MB_OK*/</span>, UINT p_nDefaultResult <span style="color: green">/*=MB_OK*/</span>, UINT p_nIDHelp <span style="color: green">/*=0*/</span>)<br />{<br />   <span style="color: blue">int </span>result = p_nDefaultResult;<br />   <span style="color: blue">switch</span>(InstallUILevelSetting::Instance-&gt;GetUILevel())<br />   {<br />   <span style="color: green">// basic UI, dialogs appear and disappea<br />   </span><span style="color: blue">case </span>InstallUILevelBasic:<br />       {<br />           g_hHook = SetWindowsHookEx(WH_CBT, CBTProc, NULL, GetCurrentThreadId());<br />           CHECK_WIN32_BOOL(NULL != g_hHook, L<span style="color: #a31515">"Error setting CBT hook"</span>);<br />           result = AfxMessageBox(p_lpszText.c_str(), p_nType, p_nIDHelp);<br />           CHECK_BOOL(0 != result, L<span style="color: #a31515">"Not enough memory to display the message box."</span>);<br />           <span style="color: blue">if </span>(result == 0xFFFFFF) result = p_nDefaultResult;<br />       }<br />       <span style="color: blue">break</span>;<br /><br />   <span style="color: green">// silent, no UI<br />   </span><span style="color: blue">case </span>InstallUILevelSilent:<br />       result = p_nDefaultResult;<br />       <span style="color: blue">break</span>;<br /><br />   <span style="color: green">// full UI<br />   </span><span style="color: blue">case </span>InstallUILevelFull:<br />   <span style="color: blue">default</span>:<br />       result = AfxMessageBox(p_lpszText.c_str(), p_nType, p_nIDHelp);<br />       <span style="color: blue">break</span>;<br />   }<br /><br />   <span style="color: blue">return </span>result;<br />}</pre><p>So, as you can see, in Basic mode is shows the message box, and after some time (if you didn’t catch the moment to press any button), it automatically emulates the pressing of default choice button. I was quite surprised when I understood it was designed to work like this – that’s because I’ve never seen such a UI behavior…</p><p>But, anyway, I suspect that a user would like to know why the installation terminated  - a certain prerequisite is not installed. As long as the mentioned behavior is hard-coded, the only option is to create a custom build of dotNetInstaller. It’s obvious that the fix is trivial here – make the case for InstallUILevelBasic go the same branch as InstallUILevelFull, that is, just show the message box. Next step is to build the solution – see “Contributing to Source Code” chapter of dotNetInstaller.chm for instructions how to build.</p><p>Finally, install the custom build instead of the official one and make sure your setup project picks the changes up. That’s it!</p><p>As usual, I would appreciate any comments and notes!</p><p><br /></p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to dotNetInstaller: launch conditions]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/02/18/moving-to-dotnetinstaller-launch/"/>
    <updated>2011-02-18T15:59:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/02/18/moving-to-dotnetinstaller-launch</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In the <a href="http://ysdevlog.blogspot.com/2011/01/moving-to-dotnetinstaller-simplest-case.html">previous post</a> I’ve described how to implement the simplest use case of a bootstrapper: create a single EXE file and run the actual installation after extraction. Today I’d like to go further and illustrate more production-like situation. </p>  <p>Ok, imagine that you’d like to add some checks to your installation package, and run the actual installation only if all those checks pass. This scenario has its own term: adding launch conditions. Launch condition is basically a statement which evaluates to either true, or false. In case it’s false, and the check is critical for the further installation, you terminate the installation process, as a rule. Otherwise, you let it do the job.</p>  <p>The <a href="http://dotnetinstaller.codeplex.com/">dotNetInstaller</a> has a conception called Installed Checks. It can check various areas, like system registry, files or directories. It is only allowed to place installed checks under components. In the <a href="http://ysdevlog.blogspot.com/2011/01/moving-to-dotnetinstaller-simplest-case.html">simplest scenario</a> we avoided using components, relying just on the install complete command. Components refer to separate independent parts of your installation package. There are various types of components – dotNetInstaller help file explains them all pretty good. So, my first guess was to add a single component of type “exe”, move my embedded files there and add a number of installed checks to it for various prerequisites I require. Something like this:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TV57QKK5n-I/AAAAAAAAAaY/64MkgfdtQ4s/s1600-h/DNI_prerequisite_wrong3.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_prerequisite_wrong" border="0" alt="DNI_prerequisite_wrong" src="http://lh6.ggpht.com/_dqWPbhO6dtA/TV57QlM1xZI/AAAAAAAAAac/YiTgeNRz_NU/DNI_prerequisite_wrong_thumb1.png?imgmax=800" width="929" height="604" /></a></p>  <p>But my assumption was not correct. The trick is that installed check (or a combination of those) placed under a component defines <strong><span >if this very component is installed</span></strong>. In other words, the most “supported” use case of dotNetInstaller is when you add all the components you need into your final package, and each of them verifies its own presence on the target machine. As a result of such verification, a component decides whether to install or not. </p>  <p>A quick search on <a href="http://codeplex.com/">codeplex.com</a> discussions gave me a link to the <a href="http://dotnetinstaller.codeplex.com/workitem/6387">appropriate feature request</a>, which proved my assumption it’s not supported out of the box today. However, there is a workaround.</p>  <p>For each of the launch conditions a separate component should be declared. The trick is such components won’t actually install anything, so we’ll call them “fake” components. A component has a property called “failed_exec_command_continue”. It contains a message to be shown to the user in case a component failed to install, so put the appropriate message there, for instance, “.NET 3.5 SP1 is not installed. The installation program will terminate”. Make sure that both “allow_continue_on_error” and “default_continue_on_error” are set to False – otherwise a user will be presented with a prompt box, instead of a simple message box. Finally, put non-existing executable to the “executable” property, e.g. “fake.exe”. Now it’s time to add a required number and combination of installed checks to this fake component, which will actually do the job. Here’s what we get at the end of this shaman dancing:</p>  <p><a href="http://lh3.ggpht.com/_dqWPbhO6dtA/TV57ROn0EgI/AAAAAAAAAag/N6dFGabezTY/s1600-h/DNI_prerequisite_right3.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_prerequisite_right" border="0" alt="DNI_prerequisite_right" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TV57RswTQ-I/AAAAAAAAAak/aiwI_JvgIFw/DNI_prerequisite_right_thumb1.png?imgmax=800" width="929" height="604" /></a></p>  <p>So, how does this work? The dotNetInstaller starts the installation from the .NET (3.5 SP1) component and the first thing it evaluates the installed checks. If the evaluation succeeds, in our sample this means that the .NET 3.5 SP1 is present on the target machine. In terms of dotNetInstaller, this means that a component we called “.NET (3.5 SP1)” is installed and we do not trigger its installation. Otherwise, if the evaluation fails, this means that the component is not present and dotNetInstaller starts its installation. It will try to call “fake.exe”, which <strong>does not exist</strong>, and will show a message. As long as we forbad the rest of the installation to continue, it will terminate. Exactly what we need!</p>  <p>Note however, that the described behavior looks that good <strong><span >in Basic UI mode</span></strong>. The error of failed component is just logged to the log file, and no more annoying dialogs are displayed.</p>  <p>If you try this out, you’ll notice one strange little thing with message boxes. In the next blog post I’ll tell you what it is, and how to handle it. And this will be the end of the trilogy. :-)</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to dotNetInstaller: the simplest case]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/01/27/moving-to-dotnetinstaller-simplest-case/"/>
    <updated>2011-01-27T17:22:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/01/27/moving-to-dotnetinstaller-simplest-case</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I’ve been playing with one of the most popular <a href="http://wix.mindcapers.com/wiki/Bootstrapper">bootstrapper</a> applications available as free and open source tool – <a href="http://http://dotnetinstaller.codeplex.com/">dotNetInstaller</a>. On one hand, it turns out to be quite a powerful and feature-rich tool. But on the other, some things seem not intuitive to me, and there are still limitations. This post opens the series of (at least, two) posts about dotNetInstaller and my own experience with it.</p>  <p>Ok, imagine you need to do a very simple thing: wrap your installation program resources into a single EXE file, let it extract necessary files to somewhere under %TEMP%, run the installation UI wizard and finally drop extracted files when the installation is done. </p>  <p>You should start by installing dotNetInstaller (I used the <a href="http://dotnetinstaller.codeplex.com/releases/view/50143">most recent 2.0 version</a>). One of the executables being installed is InstallerEditor.exe. It is a kind of IDE (smart editor) for dotNetInstaller project files, which are called configurations. The information about your project is stored as XML, that is easily DIFF-able and MERGE-able. </p>  <p>So, run InstallerEditor, and select File &gt; New – the new empty config file will be created. The first thing I suggest to do is to enable logging – it is a property of config file you’ve just created. Next, right click the root (and so far the only) node in the left pane, and select Add &gt; Configurations &gt; Setup Configuration. Actually, this is the only type of entities you can add under config file node. Besides, at this level you can set the UI level for your bootstrapper. According to our task definition, ‘basic’ is just enough. By now, you should end up with something like this:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNtemJjtI/AAAAAAAAAZQ/KQ9dQ6j8ZI4/s1600-h/DNI_initial_config%5B13%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_initial_config" border="0" alt="DNI_initial_config" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNuNVi_-I/AAAAAAAAAZU/4O4jTeYdzKM/DNI_initial_config_thumb%5B7%5D.png?imgmax=800" width="929" height="600" /></a></p>  <p>Setup configuration serves as a root for various entities: embedded files, installation components, UI controls, etc. However, our requirements for the simplest scenario doesn’t require most of it. Usually configuration consists of a number of components, but again, we won’t add them for now.</p>  <p>In order to include installation files into our bootstrapper, right-click “install:” node and select Add &gt; Embed &gt; Embed Folder. Now fill the properties for this embedded folder. Fortunately, those are just two – <em>sourcefolderpath</em> and <em>targetfolderpath</em>. Place the value ‘#APPPATH’ to the first one and any value to the second. ‘#APPPATH’ is one of the several variable substitutions offered by dotNetInstaller out-of-the-box and basically means that installation files will be picked either from the current folder, or from the one you specify in the /a switch of the linker. The ‘targetfolderpath’ can logically be left empty, because it sets the name of the subfolder under system temp location to extracts the files to. But it is designed to be required, so feel free to paste anything here, for instance, ‘exe’. Ok, so now we are at this point:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNuqEQ56I/AAAAAAAAAZY/RTdrH6MrNJU/s1600-h/DNI_embed_folder%5B11%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_embed_folder" border="0" alt="DNI_embed_folder" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNvK9SmNI/AAAAAAAAAZc/S5Oq1rRhRnM/DNI_embed_folder_thumb%5B5%5D.png?imgmax=800" width="929" height="600" /></a></p>  <p>The installation wizard to run is also among those files we embedded, of course. So, in order to run it after the extraction is done we should fill in the ‘complete_command’ property of the configuration. For this, select “install:” node and find the set of properties prefixed with “complete_command”. As you can see, the configuration entity has lots of properties to configure and is quite flexible. The “complete_command” should store the command line to run on successful installation complete. You can specify different values for each of 3 UI modes: full, basic and silent. Actually, if basic or silent are not specified, it will fall back to just “complete_command”. </p>  <p>Besides, we’d like to show CAB extraction dialog. This is especially useful when the files are large and it takes some time to extract. Set “show_cab_dialog” to ‘true’. Optionally, customize other properties of the CAB extraction dialog, like Caption and Message. So, summarizing these two paragraphs, we now have the following configuration:</p>  <p><a href="http://lh6.ggpht.com/_dqWPbhO6dtA/TUGNvkFml6I/AAAAAAAAAZg/8WfnCxbuypQ/s1600-h/DNI_complete_command%5B3%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_complete_command" border="0" alt="DNI_complete_command" src="http://lh5.ggpht.com/_dqWPbhO6dtA/TUGNwOzPvQI/AAAAAAAAAZk/xBanjpviccA/DNI_complete_command_thumb%5B1%5D.png?imgmax=800" width="929" height="604" /></a></p>  <p>Pay attention to “cab_path” property. In this form it basically means: take system %TEMP% location, and create a subfolder in it named as random GUID. This guaranties the uniqueness of the extract target location and you would not probably ever want to change it. Now, this magic location can be referenced as #CABPATH by other properties. For isntance, this is what we have done for “complete_command”. The values says: go to the folder the files were just extracted to, go down to its “exe” subfolder (remember ‘targetfolderpath’?) and run InstallWizard.exe.</p>  <p>And finally, some more details. Make sure “auto_start”, “wait_for_complete_command” and “cab_path_autodelete” are all set to ‘true’. Obviously, this will instruct our bootstrapper to start automatically, and auto delete the extracted files after the complete command completes. </p>  <h4>Linking and running</h4>  <p>Before building the project, you can run it with dotNetInstaller.exe to see the UI. Just run dotNetInstaller.exe /ConfigFile configuration.xml. But <strong><font color="#ff0000">this won’t embed any files</font></strong>. As a result, <strong><font color="#ff0000">you’ll be able to check only UI </font></strong>(which is obviously not the point for our case). <strong><font color="#ff0000">All settings which rely on embedded files will fail</font></strong>.</p>  <p>Instead, we’ll link the sources into final setup.exe. The following command does the job:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font face="Consolas">InstallerLinker.exe /o:setup.exe /t:dotNetInstaller.exe /c:install_config.xml /i:my.ico /a:source /v+</font></p>  <p>Here, /o: stands for output file name, /t: is a template of EXE file to make like – be sure to always set it to dotNetInstaller.exe, /c: is a path to the configuration file we have been editing all this time, /i: is obviously a path to the icon to use as an application icon for setup.exe, /a: is a path to the installation files to embed, and finally, /v+ turns the verbose logging on. In case there are no errors, you’ll see the following output:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNwsZQRGI/AAAAAAAAAZo/q1rMWEGoyxg/s1600-h/DNI_linker_output%5B3%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_linker_output" border="0" alt="DNI_linker_output" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNxN02_zI/AAAAAAAAAZs/Cm6G3JH9ruM/DNI_linker_output_thumb%5B1%5D.png?imgmax=800" width="681" height="514" /></a></p>  <p>Now you have setup.exe, which extracts your installation files (showing the progress), and starts your main InstallWizard.exe in case of successful extraction.</p>  <p>That’s it! As usual, your comments and notes are welcome.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to basics: Versioned, Unversioned and Shared fields]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/09/10/back-to-basics-versioned-unversioned/"/>
    <updated>2010-09-10T02:23:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/09/10/back-to-basics-versioned-unversioned</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It is well-known that each field of a template can be versioned (default option), unversioned or shared. The Template Builder UI exposes the Unversioned and Shared properties as two independent checkboxes. And thus, despite it’s a very basic Sitecore concept, it is sometimes asked <a href="http://sdn.sitecore.net/forum//ShowPost.aspx?PostID=29034">what’s the point of marking a field both shared and unversioned</a>. The answer is “a field marked both shared and unversioned is still a shared field”. Think about “shared” as a superset of “unversioned” – the field can’t be shared (between all versions of all languages) without being unversioned (between all versions of one language).</p>  <p>Let’s see how it works under the hood when the field “sharing” level is changed. Let’s create a simple template with just a single field. We’ll keep the defaults so far (versioned). Now create a content item based on this template and fill in the field. </p>  <p>Sitecore fields are stored in three different tables inside the database: VersionedFields, UnversionedFields and SharedFields. The names are quite self-explanatory. Let’s run the following SQL query:</p>  <p>&#160;&#160;&#160;&#160;&#160; <font color="#0000ff">SELECT * FROM VersionedFields WHERE FieldId = &#8216;{GUID-GOES-HERE-…}&#8217;</font></p>  <p>As a result, one record is returned – the field information of the item we’ve just created is stored in the VersionedFields table. The similar queries for UnversionedFields and SharedFields give 0 records. </p>  <p>Now change the field to be Unversioned and run all 3 queries again – it will return 1 record for UnversionedFields table and 0 for others. Change the field to be both Shared and Unversioned and repeat the experiment – the field info now resides in SharedFields table. Now if you uncheck Unversioned and leave it just Shared, it will still show 1 record for SharedFields table and 0 for others. So, here’s the evidence!</p>  <p>NOTE: changing the field “sharing” level might result in a data loss (similar to type cast operation in C#), and Sitecore warns you about it.</p>  <p>You might think that two checkboxes are to be blamed for this confusion. Check out the hot VS extension called <a href="http://visualstudiogallery.msdn.microsoft.com/en-us/44a26c88-83a7-46f6-903c-5c59bcd3d35b/view">Sitecore Rocks</a> – a brand new tool (CTP for now) for developers working with Sitecore projects in VS 2010. It seems to look more natural in this way, isn’t it?</p>  <p><a href="http://lh5.ggpht.com/_dqWPbhO6dtA/TIlsZANnP8I/AAAAAAAAAXA/3E97dawvRnU/s1600-h/RocksDesignTemplate%5B4%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="RocksDesignTemplate" border="0" alt="RocksDesignTemplate" src="http://lh6.ggpht.com/_dqWPbhO6dtA/TIlsZ1BB5aI/AAAAAAAAAXE/OHGbPYeLP2s/RocksDesignTemplate_thumb%5B2%5D.png?imgmax=800" width="644" height="178" /></a></p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe confuses the language validation and ProductCode validation]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation/"/>
    <updated>2010-05-07T19:34:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This week I faced with another issue with torch.exe. As you might know, there’s a “type” option (-t) to apply a predefined set of validation flags to the generated transform. If you’d like to generate a language transform, you should use “-t language”. It should suppress all the errors plus validate that language in both MSI packages corresponds. But it doesn’t…</p>  <p>The reason is just a simple bug in the tool. When you set “-t language” in the command line, this option is mapped to the TransformFlags.LanguageTransformDefault value. It is a combination of atomic values (those you can set via –serr and -val), and it mistakenly takes “validate product code” bit instead of “validate language bit”. I’ve never noticed this unless my installation uses both instance transforms and language transforms.</p>  <p>The workaround is quite simple: use literally “–serr” and “–val” to achieve the same result. For instance, for language transform it should be:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160; torch.exe … –serr a –serr b –serr c –serr d –serr e –serr f –val l …</p>  <p>[By the way, does it look too long just for me? I would prefer –serr abcdef :-)]</p>  <p>I’ve also filed an <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2998229&amp;group_id=105970&amp;atid=642714">issue</a> to the WiX toolset. Hope this can help somebody.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe throws scary error message unrelated to the real problem]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message/"/>
    <updated>2010-04-14T15:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I’ve been working on the localization of my installation project, and I had to create a number of language transforms. The following simple call of torch.exe</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; torch -t language setup.msi setup_ru-ru.msi -out mst\ru-ru.mst</p>  <p>returned the scary error message:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; error TRCH0001 : The Windows Installer service failed to start. Contact your support personnel</p>  <p>I’ve seen this kind of errors a couple of times, and it was a serious problem with Windows Installer engine on the target machine in all cases. Once, it indicated that Windows Installer service is completely broken, and only OS reinstall helped (fortunately, it was virtual PC)… But mighty Google gave <a href="http://blogs.msdn.com/pmarcu/archive/2008/05/30/Patching-something-you-didnt-build-with-WiX-using-WiX-.aspx#8920333">a single, but exact hint</a>. It is just a single line, and one can miss the point since that’s another problem which is discussed there. </p>  <p>So, the actual problem: if –out switch points to a folder which doesn’t exist (‘mst’ in this case), torch.exe can’t create it and returns the error. That’s okay behavior to live with, but the error message should be changed to something more appropriate: “The folder ‘mst’ can’t be found. Make sure it exists before referencing in –out switch”. I’ve also created <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2987095&amp;group_id=105970&amp;atid=642714">an issue</a> to the WiX inbox at sourceforge.net.</p>  <p>Hope this info is helpful until the message text is fixed.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going to Agileee 2009]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/09/17/going-to-agileee-2009/"/>
    <updated>2009-09-17T21:36:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/09/17/going-to-agileee-2009</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I’m heading to the <a href="http://agileee.org/">Agileee 2009 conference</a> being held in Kiev on September, 18 – 19th. This is rather new field to me – I’ve never been practicing Agile or Scrum before. We’ll see how it goes. At least, I’m expecting to learn many new and interesting things and see how to apply this in the Modules team.</p>  </div>
]]></content>
  </entry>
  
</feed>
