<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[.NET, Sitecore and setup development]]></title>
  <link href="http://yansklyarenko.github.io/atom.xml" rel="self"/>
  <link href="http://yansklyarenko.github.io/"/>
  <updated>2013-07-31T22:36:58+03:00</updated>
  <id>http://yansklyarenko.github.io/</id>
  <author>
    <name><![CDATA[Yan Sklyarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NAnt <copy> task behaves differently in 0.92 and prior versions]]></title>
    <link href="http://yansklyarenko.github.io/blog/2013/01/03/nant-task-behaves-differently-in-092/"/>
    <updated>2013-01-03T11:35:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2013/01/03/nant-task-behaves-differently-in-092</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">If you need to copy a folder together with all its contents to another folder in NAnt, you would typically write something like this:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:4960f8c7-91c0-4ec8-8979-ab0fde40976f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;wrap-lines:false;">&lt;copy todir="${target}"&gt;<br />  &lt;fileset basedir="${source}" /&gt;<br />&lt;/copy&gt;</pre></div>It turns out this code works correctly in NAnt 0.92 Alpha and above. The output is expected:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:871b39e6-e873-499d-bcab-3017221ef94f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">[copy] Copying 1 directory to '...'.</pre></div>However, the same code doesn’t work in prior versions of NAnt, for instance, 0.91. The output is as follows (only in –debug+ mode):<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:52c67d5f-bfa3-485c-b3e4-c2ec64294d6e" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">[copy] Copying 0 files to '...'.</pre></div>Obviously, <a href="https://github.com/nant/nant/issues/11" target="_blank">the issue was fixed in 0.92</a>, so the best recommendation would be to upgrade NAnt toolkit. However, if this is not an option for some reason, the following code seems to work correctly for any version:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:566e2066-71ca-4983-a0b5-40d35ce3f5bb" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">&lt;copy todir="${target}"&gt;<br />  &lt;fileset basedir="${source}"&gt;<br />    &lt;include name="**/*" /&gt;<br />  &lt;/fileset&gt;<br />&lt;/copy&gt;</pre></div>Hope this saves you some time.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Possible source of the signtool 'bad format' 0x800700C1 problem]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/11/19/possible-source-of-signtool-bad-format/"/>
    <updated>2012-11-19T17:26:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/11/19/possible-source-of-signtool-bad-format</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Today I have faced with a weird problem. The operation to sign the EXE file (actually, an installation package) with a valid certificate failed with the following error:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:bc6106fa-3bf6-4da8-a4b3-7f14ff86ba80" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">[exec] SignTool Error: SignedCode::Sign returned error: 0x800700C1<br />[exec] Either the file being signed or one of the DLL specified by /j switch is not a valid Win32 application.<br />[exec] SignTool Error: An error occurred while attempting to sign: D:\output\setup.exe</pre></div>This kind of error is usually an indication of a format incompatibility, <a href="http://technet.microsoft.com/en-us/library/cc782541(WS.10).aspx" target="_blank">when the bitness of the signtool.exe and the bitness of the EXE in question don&#8217;t correspond</a>. However, this was not the case.<br /><br />It turns out that the original EXE file was generated incorrectly because of the lack of disk space. That&#8217;s why it was broken and was recognized by the signtool like a bad format file. After disk cleanup everything worked perfectly and the EXE file was signed correctly.<br /><br />Hope this saves someone some time. </div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A solution can build fine from inside the Visual Studio, but fail to build with msbuild.exe]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/10/29/a-solution-can-build-fine-from-inside/"/>
    <updated>2012-10-29T16:35:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/10/29/a-solution-can-build-fine-from-inside</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Today I have faced with an interesting issue. Although I failed to reproduce it on a fresh new project, I think this info might be useful for others.<br />I have a solution which was upgraded from targeting .NET Framework 2.0 to .NET Framework 3.5. I’ve got a patch from a fellow developer to apply to one of the projects of that solution. The patch adds new files as well as modifies existing ones. After the patch application, the solution is successfully built from inside the Visual Studio, but fails to build from the command line with msbuild.exe. The error thrown states that <br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5c70df5d-f802-466e-9713-c35fabc6dfbb" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">“The type or namespace name 'Linq' does not exist in the namespace 'System' ”. </pre></div>The msbuild version is 3.5:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5d034399-054f-4ebd-aabb-73bf9dab56bf" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[exec] Microsoft (R) Build Engine Version 3.5.30729.5420<br />[exec] [Microsoft .NET Framework, Version 2.0.50727.5456]<br />[exec] Copyright (C) Microsoft Corporation 2007. All rights reserved.</pre></div>It turns out <a href="http://connect.microsoft.com/VisualStudio/feedback/details/665406/using-system-linq-without-reference-to-system-core-compiles-in-vs-but-not-with-msbuild-exe" target="_blank">this issue has been met by other people</a>, and even reported to Microsoft. Microsoft suggested to use MSBuild.exe 4.0 to build VS 2010 projects. However, they confirmed it is possible to use MSBuild.exe 3.5&nbsp; - in this case a reference to System.Core (3.5.0.0) must be explicitly added to the csproj file.<br />If you try to add a reference to System.Core from inside the Visual Studio, you’ll get the error saying:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d25d09ad-d4a7-4cd3-8b89-6959ec9d1e60" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">"A reference to 'System.Core' could not be added. This component is already automatically referenced by the build system"</pre></div>So, it seems that when you build a solution from inside the Visual Studio, it is capable to automatically load implicitly referenced assemblies. I suppose, MSBuild.exe 4.0 (and even SP1-patched MSBuild.exe 3.5?) can do this as well. Apparently, this has also <a href="http://blog.rlucas.net/bugfix/force-a-reference-to-system-core-in-visual-studio-2010/" target="_blank">turned out to be a known problem</a> – you can’t add that reference from the IDE. Open csproj file in your favorite editor and add this:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:cd2bda3a-a055-467e-85d3-7913a99c7de4" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: xml;">&lt;Reference Include="System.Core" /&gt;</pre></div>After this, the project builds fine in both VS and MSBuild.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default attribute values for custom NAnt tasks]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/08/15/default-attribute-values-for-custom/"/>
    <updated>2012-08-15T16:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/08/15/default-attribute-values-for-custom</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">When you create custom <a href="http://nant.sourceforge.net/">NAnt</a> tasks, you can specify various task parameter characteristics, such as whether it is a required attribute, how it validates its value, etc. This is done via the custom attributes in .NET, for example: <br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:035f0705-3d6e-49d1-b4f6-f204a32b007f" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><code class="c#">[TaskAttribute("param", Required = true), StringValidator(AllowEmpty = false)]<br />public string Param { get; set; }</code></div>It might be a good idea to be able to specify a default value for a task parameter the similar way, for instance:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:ab15929c-f17e-4af8-a9f7-002707f23da4" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">[TaskAttribute("port"), Int32Validator(1000, 65520), DefaultValue(16333)]<br />public int Port { get; set; }</pre></div>Let’s examine the way it can be implemented. First of all, let’s define the custom attribute for the default value:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:9610860a-ef97-4b43-b9fb-53404ae7af97" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">/// &lt;summary&gt;<br />/// The custom attribute for the task attribute default value<br />/// &lt;/summary&gt;<br />public class DefaultValueAttribute : Attribute<br />{<br />  public DefaultValueAttribute(object value)<br />  {<br />    this.Default = value;<br />  }<br /><br />  public object Default { get; set; }<br />}</pre></div>I suppose the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx">standard .NET DefaultValueAttribute</a> can be used for this purpose as well, but the one above is very simple and is good for this sample. Note also that in this situation we could benefit from the generic custom attributes, <a href="http://stackoverflow.com/questions/294216/why-does-c-sharp-forbid-generic-attribute-types">which unfortunately are not supported in C#, although are quite valid for CLR</a>.<br /><br />Now, when the attribute is defined, let’s design the way default values will be applied at runtime. For this purpose we’ll have to define a special base class for all our custom tasks we’d like to use default values technique:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:d0e399ab-d366-4d25-babe-725de7760c30" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;">public abstract class DefaultValueAwareTask : Task<br />{<br />  protected override void ExecuteTask()<br />  {<br />    this.SetDefaultValues();<br />  }<br /><br />  protected virtual void SetDefaultValues()<br />  {<br />    foreach (var property in GetPropertiesWithCustomAttributes&lt;DefaultValueAttribute&gt;(this.GetType()))<br />    {<br />      var attribute = (TaskAttributeAttribute)property.GetCustomAttributes(typeof(TaskAttributeAttribute), false)[0];<br />      var attributeDefaultValue = (DefaultValueAttribute)property.GetCustomAttributes(typeof(DefaultValueAttribute), false)[0];<br /><br />      if (attribute.Required)<br />      {<br />        throw new BuildException("No reason to allow both to be set", this.Location);<br />      }<br /><br />      if (this.XmlNode.Attributes[attribute.Name] == null)<br />      {<br />        property.SetValue(this, attributeDefaultValue.Default, null);<br />      }<br />    }<br />  }<br /><br />  private static IEnumerable&lt;PropertyInfo&gt; GetPropertiesWithCustomAttributes&lt;T&gt;(Type type)<br />  {<br />    return type.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance).Where(property =&gt; property.GetCustomAttributes(typeof(T), false).Length &gt; 0);<br />  }<br />}</pre></div>Let’s examine what this code actually does. The key method here is SetDefaultValues(). It iterates through the task parameters (the public properties marked with DefaultValueAttribute attribute) of the class it is defined in and checks whether the value carried by the DefaultValueAttribute should be set as a true value of the task parameter. It is quite simple: if the XmlNode of the NAnt task definition doesn’t contain the parameter in question, it means a developer didn’t set it explicitly, and it is necessary to set a default value. Moreover, if the task parameter is marked as Required and has a default value at the same time, this situation is treated as not appropriate and the exception is thrown.<br /><br />Obviously, when a custom NAnt task derives from the DefaultValueAwareTask, it has to call base.ExecuteTask() at the very start of its ExecuteTask() method implementation for this technique to work.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate a solution file for a number of C# projects files in a folder]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/07/06/generate-solution-file-for-number-of-c/"/>
    <updated>2012-07-06T14:59:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/07/06/generate-solution-file-for-number-of-c</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Some time ago I wrote my first T4 template which generates a solution (*.sln) file out of a number of C# project (*.cspoj) files, located in a folder and all descendants. Although it turned out not to be necessary to solve the task I was working on, and assuming it’s quite simple, I still decided to share it for further reference. May someone can find it useful. So, below is the entire T4 template, with no extra comments:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:260cba0a-462d-4da5-bf82-2a4da7bd7cdf" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: c#;gutter:false;wrap-lines:false;">Microsoft Visual Studio Solution File, Format Version 11.00<br /># Visual Studio 2010<br />&lt;#@ template language="cs" hostspecific="false" #&gt;<br />&lt;#@ output extension=".sln" #&gt;<br />&lt;#@ parameter name="Folder" type="System.String" #&gt; <br />&lt;#@ assembly name="System.Core" #&gt;<br />&lt;#@ assembly name="System.Xml" #&gt;<br />&lt;#@ assembly name="System.Xml.Linq" #&gt;<br />&lt;#@ import namespace="System.IO" #&gt;<br />&lt;#@ import namespace="System.Linq" #&gt;<br />&lt;#@ import namespace="System.Xml.Linq" #&gt; <br />&lt;#<br />    if (Directory.Exists(Folder))<br />    {<br />        var csprojFiles= Directory.GetFiles(Folder, "*.csproj", SearchOption.AllDirectories);<br />        foreach (var file in csprojFiles)<br />        {<br />            ProjectFileMetaData metaData = new ProjectFileMetaData(file, Folder);<br />            WriteLine("Project(\"{3}\") = \"{0}\", \"{1}\", \"{2}\"",  metaData.Name, metaData.Path, metaData.Id, ProjectFileMetaData.ProjectTypeGuid);<br />            WriteLine("EndProject");<br />        }<br />    }<br />#&gt;<br /><br />&lt;#+ <br />    public class ProjectFileMetaData<br />    {<br />        public static string ProjectTypeGuid = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";<br /><br />        public ProjectFileMetaData(string file, string root)<br />        {<br />            InitProperties(file, root);<br />        }<br /><br />        public string Name { get; set; }<br /><br />        public string Path { get; set; }<br /><br />        public string Id { get; set; }<br /><br />        private void InitProperties(string file, string root)<br />        {<br />            XDocument xDoc = XDocument.Load(file);<br />            XNamespace ns = @"http://schemas.microsoft.com/developer/msbuild/2003";<br />            XElement xElement = xDoc.Root.Elements(XName.Get("PropertyGroup", ns.NamespaceName)).First().Element(XName.Get("ProjectGuid", ns.NamespaceName));<br />            if (xElement != null)<br />            {<br />                this.Id = xElement.Value;<br />            }<br /><br />            this.Path = file.Substring(root.Length).TrimStart(new char[] { '\\' });<br /><br />            this.Name = System.IO.Path.GetFileNameWithoutExtension(file);<br />        }<br />    }<br />#&gt;</pre></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple batch script to dump the contents of the folder and its subfolders recursively]]></title>
    <link href="http://yansklyarenko.github.io/blog/2012/03/02/simple-batch-script-to-dump-contents-of/"/>
    <updated>2012-03-02T11:13:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2012/03/02/simple-batch-script-to-dump-contents-of</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">This topic might seem too minor for a blog post. You can argue that it’s covered by a simple call to a <strong><a href="http://ss64.com/nt/dir.html">dir /s</a></strong> command. Well, that’s true unless you need to perform some actions with each line in the list. In this case it could be tricky if you do not use BATCH files on a daily basis. <br />Imagine you need to dump the file paths in a folder and its subfolders to a plain list. Besides, you’d like to replace the absolute path prefix with UNC share prefix, because each path contains a shared folder and each file will be accessible from inside the network. So, here goes the script:<br /><div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5c4445c5-847e-4642-8167-0397b2755daa" style="display: inline; float: none; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;"><pre class="brush: vb;">@echo off<br />set _from=*repo<br />set _to=\\server\repo<br />FOR /F "tokens=*" %%G IN ('dir /s /b /a:-D /o:-D') DO (CALL :replace %%G) &gt;&gt; files.txt<br />GOTO :eof<br /><br />:replace<br /> set _str=%1<br /> call set _result=%%_str:%_from%=%_to%%%<br /> echo %_result%<br />GOTO :eof</pre></div><br />Let’s start from the <a href="http://ss64.com/nt/for_cmd.html">FOR</a> loop. This version of the command loops through the output of another command, in this case, dir. Essentially, we ask dir to run recursively (/s), ignore directories (/a:-D), sort by date/time, newest first (/o:-D) and output just the basic information (/b). And the FOR command works on top of this, iterating all lines of dir output (tokens=*), calling a subroutine :replace for each line and streaming the final result into files.txt.<br /><br />The subroutine does a very simple thing – it replaces one part of the string with another. Let’s step through it anyway. First, it gets the input parameter (%1) and saves it into _str variable. I suppose %1 could be used as is in the expression below, but the number of ‘%’ signs drives me crazy even without it. The next line is the most important – it does the <a href="http://ss64.com/nt/syntax-replace.html">actual replacement job</a>. I’ll try to explain all these % signs: the variable inside the expression must be wrapped with % (like _from and _to); the expression itself should go between % and % as if it’s a variable itself. And the outermost pair of % is there for escaping purpose, I suppose – you will avoid it if you use just string literals for tokens in expression. Note also the usage of the <a href="http://ss64.com/nt/call.html">CALL SET statement</a>. Finally, the last line of the subroutine echoes the result.<br /><br />There’s one last point worth attention. The _from variable, which represents the token to replace, contains a * sign. It means “replace ‘repo’ and everything before it” in the replace expression.<br /><br />The best resource I found on the topic is <a href="http://ss64.com/nt/">http://ss64.com/nt/</a>.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisited: Multiple Instance installations and patches]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance/"/>
    <updated>2011-09-14T23:00:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/09/14/revisited-multiple-instance</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I initially <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">blogged about multiple instance installations</a> couple of years ago. The way I described it worked fine for me, but the time flies and the things has changed ever since – WiX grew up to even more solid toolset, and I also gained some knowledge. So, this post is to revisit the topic and look at it through the prism of WiX 3.6.<br />Imagine you have an application, and you’d like to be able to install several instances of it side-by-side on a single machine. The starting point is still to author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_instancetransforms.htm">InstanceTransforms</a> element: <pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;   <br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;   <br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;   <br />   &lt;Instance Id="I03" ProductCode="{GUIDGOES-HERE-5494-843B-BC07BBC022DB}" ProductName="My Product 03"/&gt;<br />    ...<br />&lt;/InstanceTransforms&gt;</pre>Obviously, the number of Instance elements is the number of instances supported by this installation program (plus the default one). In order to install the default instance, you should run the following command (assuming the generated MSI package is called MultiInstance.msi): <pre class="brush:csharp">msiexec /i MultiInstance.msi</pre>In order to start the installation of another instance, change the command as follows: <pre class="brush:csharp">msiexec /i MultiInstance.msi MSINEWINSTANCE=1 TRANSFORMS=":I01"</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa370326.aspx">MSINEWINSTANCE</a> property set to 1 instructs msiexec to start the installation of another instance instead of default one. Note that in the above example we installing the instance I01. The Instance element results into an <a href="http://msdn.microsoft.com/en-us/library/aa369528.aspx">instance transform</a> being embedded into the MSI package, and by setting <a href="http://msdn.microsoft.com/en-us/library/aa372085.aspx">TRANSFORMS</a> property to “:I01” we instruct msiexec to apply the embedded instance transform which corresponds to the I01 instance. The TRANSFORMS property can contain other transforms (for instance, language transforms), but that’s another topic.<br/><br/>Uninstalling looks quite similar, for instance, default instance uninstallation: <pre class="brush:csharp">msiexec /x MultiInstance.msi</pre>In order to uninstall the extra instance, you should explicitly specify its ProductCode. So, for instance I01 the uninstall command line looks like this: <pre class="brush:csharp">msiexec /x {GUIDGOES-HERE-4731-8DAA-9E843A03D482}</pre>So far, so good – it is quite straight-forward. Now, let’s turn to the <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">Windows Installer documentation about multiple instances</a> one more time. Apart from the requirement for each instance to have a unique product code and instance identifier (this is what WiX does for free with InstanceTransforms technique), it strongly recommends to keep the data isolated. For the file data, this means installing the files of each instance to a different location – the path containing instance ID as its part fits best. For the non-file data, it’s a bit more complex: the appropriate components should have different GUIDs, and again install to a different location. <br /><br/>In <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my first attempt to approach the problem</a>, I’ve applied a workaround: generate new GUIDs for each component of new instance, embed those “component transforms” into the resulting MSI and apply along with the instance transform. Well, sounds not very efficient, but assuming a great number of components harvested automatically, this was simple enough. Fortunately, wise developers of WiX team thought this through and came up with a far more elegant solution in version 3.6.<br /><br/>Starting from <a href="http://wix.sourceforge.net/releases/3.6.1502.0/">WiX 3.6.1502.0</a>, a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_component.htm">Component</a> element has an attribute MultiInstance of YesNo type. According to the WiX docs, “If this attribute is set to &#8216;yes&#8217;, a new Component/@Guid will be generated for each instance transform.” Fantastic! That’s what we need! Let’s see how it affects the multiple instance installations on a sample. Let’s say our installation program consists of the following components, and we’d like to be able to install this software at least 3 times: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre><pre class="brush:xml">&lt;InstanceTransforms Property="INSTANCEID"&gt;<br />   &lt;Instance Id="I01" ProductCode="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" ProductName="My Product 01"/&gt;<br />   &lt;Instance Id="I02" ProductCode="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" ProductName="My Product 02"/&gt;<br />&lt;/InstanceTransforms&gt;</pre>The <a href="http://msdn.microsoft.com/en-us/library/aa367797.aspx">MSDN recommendations about multiple instances</a> are followed, except for “keeping non-file data isolated”. Let’s see how it affects the install/uninstall. Run the installation of the default and I01 instance as described above. Both instances are installed to the different locations correctly:<br /><a href="http://lh4.ggpht.com/-kNoOE7Xgkpw/TnEDOVFxiDI/AAAAAAAAAc0/xDKdDlmf2-A/s1600-h/Instance00installed%25255B3%25255D.png"><img alt="Instance00installed" border="0" height="184" src="http://lh5.ggpht.com/-f-y_ymDDpsg/TnEDPFQTf5I/AAAAAAAAAc4/csVuv73w6Sc/Instance00installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00installed" width="683" /></a><a href="http://lh6.ggpht.com/-zBD-8Nbj_JI/TnEDPmI-ZxI/AAAAAAAAAc8/0z3a4i7fM50/s1600-h/Instance00RegInstalled%25255B3%25255D.png"><img alt="Instance00RegInstalled" border="0" height="248" src="http://lh3.ggpht.com/-02O4l8thb74/TnEDQGZV0vI/AAAAAAAAAdA/K2wTQXmZC6E/Instance00RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegInstalled" width="1076" /></a><br /><br /><a href="http://lh3.ggpht.com/-x9bhH2JcruA/TnEDQignM9I/AAAAAAAAAdE/pKGT89S6oZ0/s1600-h/Instance01installed%25255B3%25255D.png"><img alt="Instance01installed" border="0" height="186" src="http://lh6.ggpht.com/-cvLMQCx_o6o/TnEDRvly36I/AAAAAAAAAdI/wUbopNkDXM0/Instance01installed_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01installed" width="680" /></a><a href="http://lh3.ggpht.com/-siDWeoSZNXk/TnEDSF2Fx4I/AAAAAAAAAdM/TlKGNa3QMkk/s1600-h/Instance01RegInstalled%25255B3%25255D.png"><img alt="Instance01RegInstalled" border="0" height="248" src="http://lh6.ggpht.com/-biKeu4p_i_E/TnEDS_RZh0I/AAAAAAAAAdQ/wx4_Pnv-wkk/Instance01RegInstalled_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance01RegInstalled" width="1076" /></a><br /><br />Now uninstall the default instance – you’ll see that non-file data was not removed properly:<br /><br /><a href="http://lh6.ggpht.com/-0AhXVNeVdgg/TnEDTVJjUXI/AAAAAAAAAdU/cdHC2RG-Ihs/s1600-h/Instance00broken%25255B3%25255D.png"><img alt="Instance00broken" border="0" height="144" src="http://lh3.ggpht.com/-U9e8M0FckmA/TnEDT5ySS2I/AAAAAAAAAdY/YQbr_a5y3uI/Instance00broken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00broken" width="679" /></a><a href="http://lh6.ggpht.com/-NzZrS2kAE3Q/TnEDURgH01I/AAAAAAAAAdc/AMxJ_8cBoBI/s1600-h/Instance00RegBroken%25255B3%25255D.png"><img alt="Instance00RegBroken" border="0" height="248" src="http://lh4.ggpht.com/-H55eKBQLubA/TnEDVKHy9TI/AAAAAAAAAdg/UVGYp9G2WAI/Instance00RegBroken_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="Instance00RegBroken" width="1076" /></a><br /><br />This is happening because the components which hold this data are considered shared by the Windows Installer, and during uninstallation of one instance it detects that there’s another one pointing to the same components and leaves those untouched. Now if you uninstall the other instance, it successfully removes both EmptyFolder and registry key, but as a result we’ll still have orphaned resources of the first instance.<br /><br />That’s the initial problem, and let’s see how elegant new WiX feature deals with it. You should only add the MultiInstance=’yes’ attribute to the components holding non-file data, and forget about the problem of orphaned resources forever. Like this: <pre class="brush:xml">&lt;Directory Id="ProductNameFolder" Name="TestName"&gt;<br />   &lt;Component Id="FileComponent" Guid="{GUIDGOES-HERE-4301-95D2-86A4C80EF5F0}"&gt;<br />      &lt;File Id="dll" Source="$(var.Source)\Some.Test.dll" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Component Id="ConfigComponent" Guid="{GUIDGOES-HERE-4c2f-BE74-CF78D2350E48}"&gt;<br />      &lt;File Id="web_config" Source="$(var.Source)\web.config" KeyPath="yes" /&gt;<br />   &lt;/Component&gt;<br />   &lt;Directory Id="EmptyFolderDir" Name="EmptyFolder"&gt;<br />      &lt;Component Id="FolderComponent" Guid="{GUIDGOES-HERE-4543-A9F8-17491670D3A6}" MultiInstance="yes"&gt;<br />         &lt;CreateFolder /&gt;<br />      &lt;/Component&gt;<br />   &lt;/Directory&gt;<br />   &lt;Component Id="RegistryComponent" Guid="{GUIDGOES-HERE-45e5-ABFD-07E5CC4D7BC9}" MultiInstance="yes"&gt;<br />      &lt;RegistryKey Id="MainRegKey" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\MultiInstanceTest\[ProductCode]"&gt;<br />         &lt;RegistryValue Id="MainRegValue" Name="InstanceId" Value="[INSTANCEID]" Type="string" /&gt;<br />         &lt;RegistryValue Id="InstallPathValue" Name="Location" Value="[ProductNameFolder]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductCodeValue" Name="ProductCode" Value="[ProductCode]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductNameValue" Name="ProductName" Value="[ProductName]" Type="string" /&gt;<br />         &lt;RegistryValue Id="ProductVersionValue" Name="ProductVersion" Value="[ProductVersion]" Type="string" /&gt;<br />      &lt;/RegistryKey&gt;<br />   &lt;/Component&gt;<br />&lt;/Directory&gt;</pre>Now check the above scenario once again: install 2 instances and uninstall them. You’ll see that both install correctly and uninstall clearly. Isn’t it GREAT?! <img alt="Smile" class="wlEmoticon wlEmoticon-smile" src="http://lh4.ggpht.com/-Q_cR2rTJMrk/TnED307vexI/AAAAAAAAAdk/KCBp9wAo2vQ/wlEmoticon-smile%25255B2%25255D.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /><br /><br />Now, let’s turn to patching. Again, if we look back to <a href="http://ysdevlog.blogspot.com/2008/12/multiple-instance-installations-and.html">my initial post on this topic</a>, I was using an ugly method to make the patch applicable for all instances of the installed product. That method assumed opening the binary patch for read/write and rude injection into its structure. Though it worked, there’s much more elegant way of doing this. I’d like to thank <a href="http://blogs.msdn.com/b/heaths/">Heath Stewart</a> for the hint – here’s the <a href="http://www.mail-archive.com/wix-users@lists.sourceforge.net/msg27696.html">full thread on wix-users mailing list</a>.<br /><br />So, the default behavior is the following: if you author the <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_patchbaseline.htm">PatchBaseline</a> element with its default validation settings, the patch will be applicable to the default instance only. That’s because it tracks the ProductCode is the product baseline it was built against, and checks it during install time. The trick is to add a <a href="http://wix.sourceforge.net/manual-wix3/wix_xsd_validate.htm">Validate</a> child to the PatchBaseline, and instruct it not to check the ProductCode: <pre class="brush:xml">&lt;Media Id="5000" Cabinet="RTM.cab"&gt;<br />   &lt;PatchBaseline Id="RTM"&gt;<br />      &lt;Validate ProductId="no" /&gt;<br />   &lt;/PatchBaseline&gt;<br />&lt;/Media&gt;</pre>So, after you build this patch, you’ll be able to apply it to a particular instance: <pre class="brush:csharp">msiexec /i {GUIDGOES-HERE-4412-9BC2-17DAFFB00D20} PATCH=patch.msp /l*v patch.log</pre>Or to all the installed instances at once (so-called “double-click scenario”): <pre class="brush:csharp">msiexec.exe /p patch.msp /l*vx patch.log</pre>There’s still one more obvious inconvenience in the patch authoring, as for me. You have to specify the ProductCode entries twice: in the main installation sources (InstanceTransform/@ProductCode) and in the patch sources (TargetProductCode/@Id). It would be just fantastic if during patch building the WiX tools could look into the instance transforms collection of the baseline package and take the list of product codes out of there. That would omit the necessity to always specify the following section in the patch: <pre class="brush:xml">&lt;TargetProductCodes Replace="no"&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4412-9BC2-17DAFFB00D20}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4731-8DAA-9E843A03D482}" /&gt;<br />    &lt;TargetProductCode Id="{GUIDGOES-HERE-4f1a-9E88-874745E9224C}" /&gt;<br />&lt;/TargetProductCodes&gt;</pre>As usual, WiX Toolset developers have done and keep doing fantastic job making our lives as setup developers easier! <br /><br />Feel free to leave a comment in case you have a note or a question. Feedback is welcome, as usual!</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to dotNetInstaller: the odd Basic UI]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/02/24/moving-to-dotnetinstaller-odd-basic-ui/"/>
    <updated>2011-02-24T18:36:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/02/24/moving-to-dotnetinstaller-odd-basic-ui</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In the <a href="http://ysdevlog.blogspot.com/2011/02/moving-to-dotnetinstaller-launch.html">previous post</a>, I’ve outlined how to emulate the launch conditions behavior in dotNetInstaller. In that article I have also emphasized the importance of turning the UI into the Basic mode. It is necessary in order to avoid extra dialogs which require user interaction. If you followed the scenario I described, you might notice a strange behavior of the BasicUI mode: <strong><span >the message boxes disappear without any user participation</span></strong>. I thought it’s be a kind of a bug, but it was done on purpose. Take a look at this code (taken from dotNetInstaller sources):</p>  <pre class="code"><span style="color: blue">int </span>DniMessageBox::Show(<span style="color: blue">const </span>std::wstring&amp; p_lpszText, UINT p_nType <span style="color: green">/*=MB_OK*/</span>, UINT p_nDefaultResult <span style="color: green">/*=MB_OK*/</span>, UINT p_nIDHelp <span style="color: green">/*=0*/</span>)<br />{<br />   <span style="color: blue">int </span>result = p_nDefaultResult;<br />   <span style="color: blue">switch</span>(InstallUILevelSetting::Instance-&gt;GetUILevel())<br />   {<br />   <span style="color: green">// basic UI, dialogs appear and disappea<br />   </span><span style="color: blue">case </span>InstallUILevelBasic:<br />       {<br />           g_hHook = SetWindowsHookEx(WH_CBT, CBTProc, NULL, GetCurrentThreadId());<br />           CHECK_WIN32_BOOL(NULL != g_hHook, L<span style="color: #a31515">"Error setting CBT hook"</span>);<br />           result = AfxMessageBox(p_lpszText.c_str(), p_nType, p_nIDHelp);<br />           CHECK_BOOL(0 != result, L<span style="color: #a31515">"Not enough memory to display the message box."</span>);<br />           <span style="color: blue">if </span>(result == 0xFFFFFF) result = p_nDefaultResult;<br />       }<br />       <span style="color: blue">break</span>;<br /><br />   <span style="color: green">// silent, no UI<br />   </span><span style="color: blue">case </span>InstallUILevelSilent:<br />       result = p_nDefaultResult;<br />       <span style="color: blue">break</span>;<br /><br />   <span style="color: green">// full UI<br />   </span><span style="color: blue">case </span>InstallUILevelFull:<br />   <span style="color: blue">default</span>:<br />       result = AfxMessageBox(p_lpszText.c_str(), p_nType, p_nIDHelp);<br />       <span style="color: blue">break</span>;<br />   }<br /><br />   <span style="color: blue">return </span>result;<br />}</pre><p>So, as you can see, in Basic mode is shows the message box, and after some time (if you didn’t catch the moment to press any button), it automatically emulates the pressing of default choice button. I was quite surprised when I understood it was designed to work like this – that’s because I’ve never seen such a UI behavior…</p><p>But, anyway, I suspect that a user would like to know why the installation terminated  - a certain prerequisite is not installed. As long as the mentioned behavior is hard-coded, the only option is to create a custom build of dotNetInstaller. It’s obvious that the fix is trivial here – make the case for InstallUILevelBasic go the same branch as InstallUILevelFull, that is, just show the message box. Next step is to build the solution – see “Contributing to Source Code” chapter of dotNetInstaller.chm for instructions how to build.</p><p>Finally, install the custom build instead of the official one and make sure your setup project picks the changes up. That’s it!</p><p>As usual, I would appreciate any comments and notes!</p><p><br /></p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to dotNetInstaller: launch conditions]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/02/18/moving-to-dotnetinstaller-launch/"/>
    <updated>2011-02-18T15:59:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/02/18/moving-to-dotnetinstaller-launch</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In the <a href="http://ysdevlog.blogspot.com/2011/01/moving-to-dotnetinstaller-simplest-case.html">previous post</a> I’ve described how to implement the simplest use case of a bootstrapper: create a single EXE file and run the actual installation after extraction. Today I’d like to go further and illustrate more production-like situation. </p>  <p>Ok, imagine that you’d like to add some checks to your installation package, and run the actual installation only if all those checks pass. This scenario has its own term: adding launch conditions. Launch condition is basically a statement which evaluates to either true, or false. In case it’s false, and the check is critical for the further installation, you terminate the installation process, as a rule. Otherwise, you let it do the job.</p>  <p>The <a href="http://dotnetinstaller.codeplex.com/">dotNetInstaller</a> has a conception called Installed Checks. It can check various areas, like system registry, files or directories. It is only allowed to place installed checks under components. In the <a href="http://ysdevlog.blogspot.com/2011/01/moving-to-dotnetinstaller-simplest-case.html">simplest scenario</a> we avoided using components, relying just on the install complete command. Components refer to separate independent parts of your installation package. There are various types of components – dotNetInstaller help file explains them all pretty good. So, my first guess was to add a single component of type “exe”, move my embedded files there and add a number of installed checks to it for various prerequisites I require. Something like this:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TV57QKK5n-I/AAAAAAAAAaY/64MkgfdtQ4s/s1600-h/DNI_prerequisite_wrong3.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_prerequisite_wrong" border="0" alt="DNI_prerequisite_wrong" src="http://lh6.ggpht.com/_dqWPbhO6dtA/TV57QlM1xZI/AAAAAAAAAac/YiTgeNRz_NU/DNI_prerequisite_wrong_thumb1.png?imgmax=800" width="929" height="604" /></a></p>  <p>But my assumption was not correct. The trick is that installed check (or a combination of those) placed under a component defines <strong><span >if this very component is installed</span></strong>. In other words, the most “supported” use case of dotNetInstaller is when you add all the components you need into your final package, and each of them verifies its own presence on the target machine. As a result of such verification, a component decides whether to install or not. </p>  <p>A quick search on <a href="http://codeplex.com/">codeplex.com</a> discussions gave me a link to the <a href="http://dotnetinstaller.codeplex.com/workitem/6387">appropriate feature request</a>, which proved my assumption it’s not supported out of the box today. However, there is a workaround.</p>  <p>For each of the launch conditions a separate component should be declared. The trick is such components won’t actually install anything, so we’ll call them “fake” components. A component has a property called “failed_exec_command_continue”. It contains a message to be shown to the user in case a component failed to install, so put the appropriate message there, for instance, “.NET 3.5 SP1 is not installed. The installation program will terminate”. Make sure that both “allow_continue_on_error” and “default_continue_on_error” are set to False – otherwise a user will be presented with a prompt box, instead of a simple message box. Finally, put non-existing executable to the “executable” property, e.g. “fake.exe”. Now it’s time to add a required number and combination of installed checks to this fake component, which will actually do the job. Here’s what we get at the end of this shaman dancing:</p>  <p><a href="http://lh3.ggpht.com/_dqWPbhO6dtA/TV57ROn0EgI/AAAAAAAAAag/N6dFGabezTY/s1600-h/DNI_prerequisite_right3.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_prerequisite_right" border="0" alt="DNI_prerequisite_right" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TV57RswTQ-I/AAAAAAAAAak/aiwI_JvgIFw/DNI_prerequisite_right_thumb1.png?imgmax=800" width="929" height="604" /></a></p>  <p>So, how does this work? The dotNetInstaller starts the installation from the .NET (3.5 SP1) component and the first thing it evaluates the installed checks. If the evaluation succeeds, in our sample this means that the .NET 3.5 SP1 is present on the target machine. In terms of dotNetInstaller, this means that a component we called “.NET (3.5 SP1)” is installed and we do not trigger its installation. Otherwise, if the evaluation fails, this means that the component is not present and dotNetInstaller starts its installation. It will try to call “fake.exe”, which <strong>does not exist</strong>, and will show a message. As long as we forbad the rest of the installation to continue, it will terminate. Exactly what we need!</p>  <p>Note however, that the described behavior looks that good <strong><span >in Basic UI mode</span></strong>. The error of failed component is just logged to the log file, and no more annoying dialogs are displayed.</p>  <p>If you try this out, you’ll notice one strange little thing with message boxes. In the next blog post I’ll tell you what it is, and how to handle it. And this will be the end of the trilogy. :-)</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to dotNetInstaller: the simplest case]]></title>
    <link href="http://yansklyarenko.github.io/blog/2011/01/27/moving-to-dotnetinstaller-simplest-case/"/>
    <updated>2011-01-27T17:22:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2011/01/27/moving-to-dotnetinstaller-simplest-case</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I’ve been playing with one of the most popular <a href="http://wix.mindcapers.com/wiki/Bootstrapper">bootstrapper</a> applications available as free and open source tool – <a href="http://http://dotnetinstaller.codeplex.com/">dotNetInstaller</a>. On one hand, it turns out to be quite a powerful and feature-rich tool. But on the other, some things seem not intuitive to me, and there are still limitations. This post opens the series of (at least, two) posts about dotNetInstaller and my own experience with it.</p>  <p>Ok, imagine you need to do a very simple thing: wrap your installation program resources into a single EXE file, let it extract necessary files to somewhere under %TEMP%, run the installation UI wizard and finally drop extracted files when the installation is done. </p>  <p>You should start by installing dotNetInstaller (I used the <a href="http://dotnetinstaller.codeplex.com/releases/view/50143">most recent 2.0 version</a>). One of the executables being installed is InstallerEditor.exe. It is a kind of IDE (smart editor) for dotNetInstaller project files, which are called configurations. The information about your project is stored as XML, that is easily DIFF-able and MERGE-able. </p>  <p>So, run InstallerEditor, and select File &gt; New – the new empty config file will be created. The first thing I suggest to do is to enable logging – it is a property of config file you’ve just created. Next, right click the root (and so far the only) node in the left pane, and select Add &gt; Configurations &gt; Setup Configuration. Actually, this is the only type of entities you can add under config file node. Besides, at this level you can set the UI level for your bootstrapper. According to our task definition, ‘basic’ is just enough. By now, you should end up with something like this:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNtemJjtI/AAAAAAAAAZQ/KQ9dQ6j8ZI4/s1600-h/DNI_initial_config%5B13%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_initial_config" border="0" alt="DNI_initial_config" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNuNVi_-I/AAAAAAAAAZU/4O4jTeYdzKM/DNI_initial_config_thumb%5B7%5D.png?imgmax=800" width="929" height="600" /></a></p>  <p>Setup configuration serves as a root for various entities: embedded files, installation components, UI controls, etc. However, our requirements for the simplest scenario doesn’t require most of it. Usually configuration consists of a number of components, but again, we won’t add them for now.</p>  <p>In order to include installation files into our bootstrapper, right-click “install:” node and select Add &gt; Embed &gt; Embed Folder. Now fill the properties for this embedded folder. Fortunately, those are just two – <em>sourcefolderpath</em> and <em>targetfolderpath</em>. Place the value ‘#APPPATH’ to the first one and any value to the second. ‘#APPPATH’ is one of the several variable substitutions offered by dotNetInstaller out-of-the-box and basically means that installation files will be picked either from the current folder, or from the one you specify in the /a switch of the linker. The ‘targetfolderpath’ can logically be left empty, because it sets the name of the subfolder under system temp location to extracts the files to. But it is designed to be required, so feel free to paste anything here, for instance, ‘exe’. Ok, so now we are at this point:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNuqEQ56I/AAAAAAAAAZY/RTdrH6MrNJU/s1600-h/DNI_embed_folder%5B11%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_embed_folder" border="0" alt="DNI_embed_folder" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNvK9SmNI/AAAAAAAAAZc/S5Oq1rRhRnM/DNI_embed_folder_thumb%5B5%5D.png?imgmax=800" width="929" height="600" /></a></p>  <p>The installation wizard to run is also among those files we embedded, of course. So, in order to run it after the extraction is done we should fill in the ‘complete_command’ property of the configuration. For this, select “install:” node and find the set of properties prefixed with “complete_command”. As you can see, the configuration entity has lots of properties to configure and is quite flexible. The “complete_command” should store the command line to run on successful installation complete. You can specify different values for each of 3 UI modes: full, basic and silent. Actually, if basic or silent are not specified, it will fall back to just “complete_command”. </p>  <p>Besides, we’d like to show CAB extraction dialog. This is especially useful when the files are large and it takes some time to extract. Set “show_cab_dialog” to ‘true’. Optionally, customize other properties of the CAB extraction dialog, like Caption and Message. So, summarizing these two paragraphs, we now have the following configuration:</p>  <p><a href="http://lh6.ggpht.com/_dqWPbhO6dtA/TUGNvkFml6I/AAAAAAAAAZg/8WfnCxbuypQ/s1600-h/DNI_complete_command%5B3%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_complete_command" border="0" alt="DNI_complete_command" src="http://lh5.ggpht.com/_dqWPbhO6dtA/TUGNwOzPvQI/AAAAAAAAAZk/xBanjpviccA/DNI_complete_command_thumb%5B1%5D.png?imgmax=800" width="929" height="604" /></a></p>  <p>Pay attention to “cab_path” property. In this form it basically means: take system %TEMP% location, and create a subfolder in it named as random GUID. This guaranties the uniqueness of the extract target location and you would not probably ever want to change it. Now, this magic location can be referenced as #CABPATH by other properties. For isntance, this is what we have done for “complete_command”. The values says: go to the folder the files were just extracted to, go down to its “exe” subfolder (remember ‘targetfolderpath’?) and run InstallWizard.exe.</p>  <p>And finally, some more details. Make sure “auto_start”, “wait_for_complete_command” and “cab_path_autodelete” are all set to ‘true’. Obviously, this will instruct our bootstrapper to start automatically, and auto delete the extracted files after the complete command completes. </p>  <h4>Linking and running</h4>  <p>Before building the project, you can run it with dotNetInstaller.exe to see the UI. Just run dotNetInstaller.exe /ConfigFile configuration.xml. But <strong><font color="#ff0000">this won’t embed any files</font></strong>. As a result, <strong><font color="#ff0000">you’ll be able to check only UI </font></strong>(which is obviously not the point for our case). <strong><font color="#ff0000">All settings which rely on embedded files will fail</font></strong>.</p>  <p>Instead, we’ll link the sources into final setup.exe. The following command does the job:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font face="Consolas">InstallerLinker.exe /o:setup.exe /t:dotNetInstaller.exe /c:install_config.xml /i:my.ico /a:source /v+</font></p>  <p>Here, /o: stands for output file name, /t: is a template of EXE file to make like – be sure to always set it to dotNetInstaller.exe, /c: is a path to the configuration file we have been editing all this time, /i: is obviously a path to the icon to use as an application icon for setup.exe, /a: is a path to the installation files to embed, and finally, /v+ turns the verbose logging on. In case there are no errors, you’ll see the following output:</p>  <p><a href="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNwsZQRGI/AAAAAAAAAZo/q1rMWEGoyxg/s1600-h/DNI_linker_output%5B3%5D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="DNI_linker_output" border="0" alt="DNI_linker_output" src="http://lh4.ggpht.com/_dqWPbhO6dtA/TUGNxN02_zI/AAAAAAAAAZs/Cm6G3JH9ruM/DNI_linker_output_thumb%5B1%5D.png?imgmax=800" width="681" height="514" /></a></p>  <p>Now you have setup.exe, which extracts your installation files (showing the progress), and starts your main InstallWizard.exe in case of successful extraction.</p>  <p>That’s it! As usual, your comments and notes are welcome.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to basics: Versioned, Unversioned and Shared fields]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/09/10/back-to-basics-versioned-unversioned/"/>
    <updated>2010-09-10T02:23:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/09/10/back-to-basics-versioned-unversioned</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It is well-known that each field of a template can be versioned (default option), unversioned or shared. The Template Builder UI exposes the Unversioned and Shared properties as two independent checkboxes. And thus, despite it’s a very basic Sitecore concept, it is sometimes asked <a href="http://sdn.sitecore.net/forum//ShowPost.aspx?PostID=29034">what’s the point of marking a field both shared and unversioned</a>. The answer is “a field marked both shared and unversioned is still a shared field”. Think about “shared” as a superset of “unversioned” – the field can’t be shared (between all versions of all languages) without being unversioned (between all versions of one language).</p>  <p>Let’s see how it works under the hood when the field “sharing” level is changed. Let’s create a simple template with just a single field. We’ll keep the defaults so far (versioned). Now create a content item based on this template and fill in the field. </p>  <p>Sitecore fields are stored in three different tables inside the database: VersionedFields, UnversionedFields and SharedFields. The names are quite self-explanatory. Let’s run the following SQL query:</p>  <p>&#160;&#160;&#160;&#160;&#160; <font color="#0000ff">SELECT * FROM VersionedFields WHERE FieldId = &#8216;{GUID-GOES-HERE-…}&#8217;</font></p>  <p>As a result, one record is returned – the field information of the item we’ve just created is stored in the VersionedFields table. The similar queries for UnversionedFields and SharedFields give 0 records. </p>  <p>Now change the field to be Unversioned and run all 3 queries again – it will return 1 record for UnversionedFields table and 0 for others. Change the field to be both Shared and Unversioned and repeat the experiment – the field info now resides in SharedFields table. Now if you uncheck Unversioned and leave it just Shared, it will still show 1 record for SharedFields table and 0 for others. So, here’s the evidence!</p>  <p>NOTE: changing the field “sharing” level might result in a data loss (similar to type cast operation in C#), and Sitecore warns you about it.</p>  <p>You might think that two checkboxes are to be blamed for this confusion. Check out the hot VS extension called <a href="http://visualstudiogallery.msdn.microsoft.com/en-us/44a26c88-83a7-46f6-903c-5c59bcd3d35b/view">Sitecore Rocks</a> – a brand new tool (CTP for now) for developers working with Sitecore projects in VS 2010. It seems to look more natural in this way, isn’t it?</p>  <p><a href="http://lh5.ggpht.com/_dqWPbhO6dtA/TIlsZANnP8I/AAAAAAAAAXA/3E97dawvRnU/s1600-h/RocksDesignTemplate%5B4%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="RocksDesignTemplate" border="0" alt="RocksDesignTemplate" src="http://lh6.ggpht.com/_dqWPbhO6dtA/TIlsZ1BB5aI/AAAAAAAAAXE/OHGbPYeLP2s/RocksDesignTemplate_thumb%5B2%5D.png?imgmax=800" width="644" height="178" /></a></p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe confuses the language validation and ProductCode validation]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation/"/>
    <updated>2010-05-07T19:34:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/05/07/torchexe-confuses-langauge-validation</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This week I faced with another issue with torch.exe. As you might know, there’s a “type” option (-t) to apply a predefined set of validation flags to the generated transform. If you’d like to generate a language transform, you should use “-t language”. It should suppress all the errors plus validate that language in both MSI packages corresponds. But it doesn’t…</p>  <p>The reason is just a simple bug in the tool. When you set “-t language” in the command line, this option is mapped to the TransformFlags.LanguageTransformDefault value. It is a combination of atomic values (those you can set via –serr and -val), and it mistakenly takes “validate product code” bit instead of “validate language bit”. I’ve never noticed this unless my installation uses both instance transforms and language transforms.</p>  <p>The workaround is quite simple: use literally “–serr” and “–val” to achieve the same result. For instance, for language transform it should be:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160; torch.exe … –serr a –serr b –serr c –serr d –serr e –serr f –val l …</p>  <p>[By the way, does it look too long just for me? I would prefer –serr abcdef :-)]</p>  <p>I’ve also filed an <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2998229&amp;group_id=105970&amp;atid=642714">issue</a> to the WiX toolset. Hope this can help somebody.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torch.exe throws scary error message unrelated to the real problem]]></title>
    <link href="http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message/"/>
    <updated>2010-04-14T15:35:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2010/04/14/torchexe-throws-scary-error-message</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I’ve been working on the localization of my installation project, and I had to create a number of language transforms. The following simple call of torch.exe</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; torch -t language setup.msi setup_ru-ru.msi -out mst\ru-ru.mst</p>  <p>returned the scary error message:</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; error TRCH0001 : The Windows Installer service failed to start. Contact your support personnel</p>  <p>I’ve seen this kind of errors a couple of times, and it was a serious problem with Windows Installer engine on the target machine in all cases. Once, it indicated that Windows Installer service is completely broken, and only OS reinstall helped (fortunately, it was virtual PC)… But mighty Google gave <a href="http://blogs.msdn.com/pmarcu/archive/2008/05/30/Patching-something-you-didnt-build-with-WiX-using-WiX-.aspx#8920333">a single, but exact hint</a>. It is just a single line, and one can miss the point since that’s another problem which is discussed there. </p>  <p>So, the actual problem: if –out switch points to a folder which doesn’t exist (‘mst’ in this case), torch.exe can’t create it and returns the error. That’s okay behavior to live with, but the error message should be changed to something more appropriate: “The folder ‘mst’ can’t be found. Make sure it exists before referencing in –out switch”. I’ve also created <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2987095&amp;group_id=105970&amp;atid=642714">an issue</a> to the WiX inbox at sourceforge.net.</p>  <p>Hope this info is helpful until the message text is fixed.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going to Agileee 2009]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/09/17/going-to-agileee-2009/"/>
    <updated>2009-09-17T21:36:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/09/17/going-to-agileee-2009</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I’m heading to the <a href="http://agileee.org/">Agileee 2009 conference</a> being held in Kiev on September, 18 – 19th. This is rather new field to me – I’ve never been practicing Agile or Scrum before. We’ll see how it goes. At least, I’m expecting to learn many new and interesting things and see how to apply this in the Modules team.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebDirProperties: AnonymousUser attribute is not obligatory]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/08/18/webdirproperties-anonymoususer/"/>
    <updated>2009-08-18T23:46:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/08/18/webdirproperties-anonymoususer</id>
    <content type="html"><![CDATA[<div class='post'>
<p>When you specify a <em>WebDirProperties</em> element to be used by the sites you install (configure) with WiX, you might also want to allow anonymous access to this site. Fortunately, there’s an attribute <em>AnonymousAccess</em>, which being set to ‘yes’ allows anonymous access to IIS web site.</p>  <p>NOTE: If you don’t address any property of “authorization” group (<em>AnonymousAccess, BasicAuthentication, DigestAuthentication, PassportAuthentication</em> or <em>WindowsAuthentication</em>) in your <em>WebDirProperties</em>, the site inherits those from w3svc root. If you set at least one explicitly, you need to set others the way you wish, because WiX defaults might not work for you. </p>  <p>The wix.chm states that “<a href="http://wix.sourceforge.net/manual-wix3/iis_xsd_webdirproperties.htm">When setting this (AnonymousAccess) to &#8216;yes&#8217; you should also provide the user account using the AnonymousUser attribute, and determine what setting to use for the IIsControlledPassword attribute.</a>” But it turns out you are not forced to provide the AnonymousUser attribute and I suppose you never wanted to – you should provide a password as well, but who knows the password of IUSR on a target machine?</p>  <p>Instead, just omit the <em>AnonymousUser</em> attribute and this part of IIS metabase will stay untouched. The username/password will inherit from higher node (again, w3svc). And yes, don’t forget <em>IIsControlledPassword</em>=”yes”.</p>  <p>Hope this helps you tuning the website during the installation.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A warning to VB.NET developers]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/08/16/warning-to-vbnet-developers/"/>
    <updated>2009-08-16T23:43:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/08/16/warning-to-vbnet-developers</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Avoid defining methods with default arguments!</p>  <p>Today I have been exploring the “Member design” chapter of a great book of <a href="http://blogs.msdn.com/kcwalina/">Cwalina</a>/<a href="http://blogs.msdn.com/brada/">Abrams</a> “<a href="http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=dp_ob_title_bk">Framework Design Guidelines</a>”, and found a guideline which shocked me a bit. No, the guideline itself is correct and valuable. I just was never thinking it works like this.</p>  <p>VB.NET has a language feature called default arguments. When you define a method in your class, you can specify default values to the optional parameters to be taken when this parameter is omitted. As far as I understand, this is a kind of alternative to the method overloading. </p>  <p>Consider the following code:</p>  <p><font color="#0000ff">Public Class DefaultValues      <br />&#160;&#160;&#160; Public Function Sum(ByVal a As Integer, Optional ByVal b As Integer =</font> <strong><font color="#ff0000">100</font></strong><font color="#0000ff">)      <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; Sum = a + b       <br />&#160;&#160;&#160; End Function       <br />&#160; End Class</font></p>  <p>(I speak C# myself, so excuse me my poor VB ;-))</p>  <p>Let’s say we compile this code into a DLL and we have a client console application to utilize that library:</p>  <p><font color="#0000ff">Module TestDefaultValues      <br />&#160;&#160;&#160; Sub Main()       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; Dim df As DefaultValues.DefaultValues = New DefaultValues.DefaultValues()       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; Console.WriteLine(df.Sum(<strong><font color="#ff0000">55</font></strong>))       <br />&#160;&#160;&#160; End Sub       <br />&#160; End Module</font></p>  <p>Compile everything and run TestDefaultValues.exe. The result is predictable: <strong><font color="#ff0000">155</font></strong>.</p>  <p>Now change the default value from 100 to 200 and compile only the library. DO NOT recompile the client application. Run it again, and it is still <strong><font color="#ff0000">155</font></strong>!</p>  <p>This is why it is strongly not recommended to use default arguments instead of normal method overloading. And this issue is why C# doesn’t expose this technique. </p>  <p>Be careful, VB.NET developers! And long live C#! :-)</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSLT: inline blocks of managed code]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/07/19/xslt-inline-blocks-of-managed-code/"/>
    <updated>2009-07-19T23:24:00+03:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/07/19/xslt-inline-blocks-of-managed-code</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It’s not a secret that XSLT supports <a href="http://www.w3.org/TR/xslt11/#define-extension-functions">blocks of code</a>, written in another language, to be used inside the stylesheet. It seems to have been there from the very beginning – at least, <a href="http://www.w3.org/TR/xslt11/">XSLT 1.1</a> understands it. </p>  <p>However, Microsoft enriched this option with their own element, <a href="http://msdn.microsoft.com/en-us/library/ms256042.aspx">msxsl:script</a>. It offers pretty much the same functionality, but you can also write the code in C# or any other language of .NET platform. XSLT gurus might argue that it is superfluous stuff and it is unnecessary in 99% of cases. Well, as for me, XSLT lacks a number of useful functions in the standard library, such as ToLower/ToUpper, EndWith, etc. You never think about such low level things when programming C#, but you often have to invent a wheel trying to do the same with XSLT.</p>  <p>More details can be found in the <a href="http://msdn.microsoft.com/en-us/library/wxaw5z5e.aspx">official documentation</a>, but here is a brief extract:</p>  <ul>   <li>guess an extra prefix and let XSLT processor know about it:      <br />      <br />&lt;xsl:stylesheet version=&quot;1.0&quot;       <br />&#160; xmlns:xsl=&quot;<a href="http://www.w3.org/1999/XSL/Transform&quot;">http://www.w3.org/1999/XSL/Transform&quot;</a>       <br />&#160; xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot;       <br />&#160; <strong>xmlns:ext=&quot;</strong><a href="http://my.domain.com/ext&quot;"><strong>http://my.domain.com/ext&quot;</strong></a>&gt;       <br />&#160;&#160; &#8230;       <br />&lt;/xsl:stylesheet&gt;       <br />      <br />Also, pay attention how msxsl prefix is defined – it is required to use msxsl:script syntax.       <br /></li>    <li>code your extension function:      <br />      <br />&lt;msxsl:script language=&quot;<strong>C#&quot;</strong> implements-prefix=&quot;<strong>ext</strong>&quot;&gt;       <br />&#160;&#160; public string ToUpper(string inString)       <br />&#160;&#160; {       <br />&#160;&#160;&#160;&#160;&#160; return inString.ToUpper();       <br />&#160;&#160; }       <br />&lt;/msxsl:script&gt;       <br /></li>    <li>and finally use it:      <br />      <br />&lt;xsl:value-of select=&quot;ext:ToUpper(@Name))&quot;/&gt; </li> </ul>  <p>Obviously, it is not a good idea to write lots of code this way. It makes the XSLT stylesheet larger and a bit harder to maintain. And, according to Microsoft, you should “<a href="http://msdn.microsoft.com/en-us/library/ms256042.aspx">avoid script blocks from XSLT files, because they require loading the script engine multiple times</a>”. Actually, if you created an XSLT stylesheet to fill it with tones of .NET code, you’re definitely doing something wrong. But it seems to be good addition to small, but useful “one-line” operations.</p>  <h4>Sitecore and msxsl:script</h4>  <p>If you plan to take advantage of inline blocks of C# code in Sitecore XSL rendering, you’ll have to do one more step. By default, .NET API to handle the XSL transforms disables the possibility to use msxsl:script. It is probably done for security reason. But the web.config of your Sitecore solution contains the setting <strong>EnableXslScripts</strong>, which you can easily set to true and be happy:</p>  <p>&lt;!&#8211;&#160; ENABLE XSLT SCRIPTS    <br />&#160;&#160;&#160;&#160;&#160; Determine whether XSLT script support should be enabled.     <br />&#160;&#160;&#160;&#160;&#160; If script support is not enabled, it will be an error if the XSLT file contains script blocks.     <br />&#160;&#160;&#160;&#160;&#160; <strong>Default value: false</strong>.     <br />&#8211;&gt;     <br />&lt;setting name=&quot;EnableXslScripts&quot; value=&quot;<strong>true</strong>&quot; /&gt; </p>  <p>The performance seems to be the same for this simple code either written in msxsl:script block, or wrapped into <a href="http://sdn.sitecore.net/upload/sitecore6/61/presentation_component_cookbook_sc61_a4.pdf">XSL extension</a>. So, the choice is yours.</p>  <h4>WiX and msxsl:script</h4>  <p>The <a href="http://wix.sourceforge.net/manual-wix3/heat.htm">heat.exe</a> utility of the WiX toolset has an option to run the harvested authoring against XSLT transform. This is a checkpoint when you can mutate the output before it is done. INHO, it is the most powerful extension option of Heat, because you can do anything with the XML fragment in XSLT.</p>  <p>However, it was a bit disappointing to find out the scripts are disabled by default, and it is not customizable, and the easiest way to fix this is to patch Heat itself and prepare custom WiX build. It would be great if this option is available one day in the base, either as a command line argument, or a configuration setting.</p>  <p>That’s it. If you have some experience with this trick, knowing its pros and cons deeper, share it here. And as usual, any comments are welcome.</p>  <p>P.S. this post was written with the help of Windows Live writer :-)</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validating the source of TreeList]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/03/22/validating-source-of-treelist/"/>
    <updated>2009-03-22T21:18:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/03/22/validating-source-of-treelist</id>
    <content type="html"><![CDATA[<div class='post'>
Sitecore 6 validation was designed to validate the field values. Recently, I also found it useful to control the source of the complex field types, like TreeList. In this post, I&#8217;ll explain this option taking the TreeList field type as an example.<div><br /></div><div>I&#8217;m skipping the validation basics here, since this topic is covered by <a href="http://alexeyrusakov.com/sitecoreblog/">Alexey Rusakov</a> in his <a href="http://alexeyrusakov.com/sitecoreblog/2008/07/02/Sitecore+6+Validation+Part+1.aspx">validation series</a>.</div><div><br /></div><div>You can define a number of parameters in the source of TreeList field type. The complete list is described in the paragraph 2.4.2 &#8220;How to Control the List of Items in a Selection Field&#8221; of the <a href="http://sdn5.sitecore.net/upload/sitecore6/datadefinitioncookbook-a4.pdf">Data Definition cookbook</a>. These parameters can filter the available and visible items in the content tree (IncludeTemplatesForSelection, ExcludeItemsForDisplay, etc.), define the tree root (DataSource), control multiple selection (AllowMultipleSelection), etc.</div><div><br /></div><div>But modifying this long list of parameters in a one-line edit field can lead to a simple typos, both in the parameters&#8217; names and values. Let&#8217;s examine how this can be &#8220;solved&#8221; by introducing a source validator.</div><div><br /></div><div>The BaseValidator class, the very root of the validator hierarchy in Sitecore API, has a protected method GetField(), which returns an instance of a Field - the one we validate. Hence, the Source property is also available. We want to validate only complex source here, thus skipping if it is an ID or an item path:</div><div><br /></div><div><div>        protected override ValidatorResult Evaluate()</div><div>        {</div><div>            ValidatorResult result = ValidatorResult.Valid;</div><div><br /></div><div>            Field field = GetField();</div><div>            if (field != null)</div><div>            {</div><div>                string fieldSource = field.Source;</div><div>                if (!string.IsNullOrEmpty(fieldSource) &amp;&amp; !ID.IsID(fieldSource) </div><div>                    &amp;&amp; !fieldSource.StartsWith(&#8220;/&#8221;, StringComparison.InvariantCulture))</div><div>                {</div><div>                    result = EvaluateSourceParameters(fieldSource);</div><div>                }</div><div>            }</div><div><br /></div><div>            return result;</div><div>        }</div><div><br /></div></div><div>Ok, let&#8217;s start the validation from just the verification if the source is &#8220;well-formed&#8221;. It might happen that a certain parameter was left without a value, or a typo was introduced to the well-known name. Sitecore will never throw an error in such a case, but instead you may receive an orphaned field with nothing to choose from. Thus, the simplest validation includes these two checks, otherwise it keeps the name/value pairs for further analysis:</div><div><br /></div><div><div>        ValidatorResult EvaluateSourceParameters(string fieldSource)</div><div>        {</div><div>            SafeDictionary<string> parameters = new SafeDictionary<string>();</string></string></div><div>            string[] sourceParts = fieldSource.Split(&#8216;&amp;&#8217;);</div><div>            foreach (string part in sourceParts)</div><div>            {</div><div>                if (string.IsNullOrEmpty(part))</div><div>                {</div><div>                    continue;</div><div>                }</div><div>                if (!part.Contains(&#8220;=&#8221;) || part.EndsWith(&#8220;=&#8221;))</div><div>                {</div><div>                    Text = string.Format(&#8220;The value is not set for source parameter &#8216;{0}&#8217;&#8221;, part.TrimEnd(&#8216;=&#8217;));</div><div>                    return GetFailedResult(ValidatorResult.Error);</div><div>                }</div><div>                else</div><div>                {</div><div>                    string parameterName = part.Substring(0, part.IndexOf(&#8216;=&#8217;)).ToLower();</div><div>                    if (!sourceParameters.Contains(parameterName))</div><div>                    {</div><div>                        Text = string.Format(&#8220;Unknown source parameter &#8216;{0}&#8217;&#8221;, parameterName);</div><div>                        return GetFailedResult(ValidatorResult.Error);</div><div>                    }</div><div>                    else</div><div>                    {</div><div>                        string parameterValue = part.Substring(part.IndexOf(&#8216;=&#8217;) + 1);</div><div>                        parameters.Add(parameterName, parameterValue);</div><div>                    }</div><div>                }</div><div>            }</div><div>            return EvaluateWellFormedParameters(parameters);</div><div>        }</div><div><br /></div><div>The further validation can go deeper and verify the presence of the specified template or item. The method EvaluateWellFormedParameters in this example just iterates the name/value pairs of parameters and applies a certain validation strategy, for instance:</div><div><br /></div><div><div>        ValidatorResult EvaluateTemplates(string value, Database database)</div><div>        {</div><div>            string[] templates = value.Split(new char[] { &#8216;,&#8217; });</div><div>            foreach (string template in templates)</div><div>            {</div><div>                if (!string.IsNullOrEmpty(template) &amp;&amp; Query.SelectSingleItem(string.Format(&#8220;/sitecore/templates//*[@@key=&#8217;{0}&#8217;]&#8221;, template.ToLower()), database) == null)</div><div>                {</div><div>                    Text = string.Format(&#8220;The template &#8216;{0}&#8217; doesn&#8217;t exist in the &#8216;{1}&#8217; database&#8221;, template, database.Name);</div><div>                    return ValidatorResult.Warning;</div><div>                }</div><div>            }</div><div>            return ValidatorResult.Valid;</div><div>        }</div><div><br /></div><div>I&#8217;m attaching the <a href="http://sites.google.com/site/yshost/Home/files/TreeListSourceValidator.cs">full code of this example</a>. </div><div><br /></div><div>There are several notes to consider:</div><div><ul><li>The DatabaseName parameter is not validated, because Sitecore takes over this. Try specifying DatabaseName=nosuchdb, and press Save</li><li>The parameter names are case-insensitive. This is because the parameters are extracted with the StringUtil.ExtractParameter() method, which ignores the case</li><li>The TreeList field type doesn&#8217;t &#8220;tolower&#8221; the values of IncludeItemsForDisplay and ExcludeItemsForDisplay parameters. Hence, be sure to specify an item key instead of an item name here</li><li>The content tree filter is built out of the &#8220;ForDisplay&#8221; parameters using &#8216;and&#8217; operation. Thus, if IncludeItemsForDisplay contain items of other templates than those specified in IncludeTemplatesForDisplay, this results in an empty tree. This can also be a point of extension of this validator&#8217;s functionality</li></ul><div>Hope anyone finds this article useful. As usual, I would appreciate any comments.</div></div></div></div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extended logging options in WiX custom actions]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/02/02/extended-logging-options-in-wix-custom/"/>
    <updated>2009-02-02T22:46:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/02/02/extended-logging-options-in-wix-custom</id>
    <content type="html"><![CDATA[<div class='post'>
The best and maybe the only way to find out what&#8217;s going wrong with the installation is investigating the MSI log file. Fortunately, the Windows Installer respects log writing very much. You can find the ways to enable logging and different logging options <a href="http://msdn.microsoft.com/en-us/library/aa370536(VS.85).aspx">here</a>.<div><br /></div><div>The verbose log contains all the information MSI can generate. Though it is really useful when it comes to troubleshooting the failed installation, it is quite hard to read, especially for newbies. Again, fortunately, there&#8217;s a super chapter &#8220;Using the Windows Installer log&#8221; in a super book called <a href="http://www.amazon.com/Definitive-Guide-Windows-Installer-Experts/dp/1590592972">&#8220;The Definitive Guide to Windows Installer&#8221; by Phil Wilson</a>, which guides you through the basics of log file reading and understanding.</div><div><br /></div><div>I used to generate the log file with /L*v options, which means verbose. But, if you use WiX custom actions, it turns out that you can make them logging even more verbose.</div><div><br /></div><div>If you browse the WiX source code, you can find the lines like this in its custom actions:</div><div><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">WcaLog(LOGMSG_STANDARD, &#8220;Error: Cannot locate User.User=&#8217;%S&#8217;&#8221;, wzUser);</span></span><br /></div><div><br /></div><div>The first argument is a logging level. It can be </div><div><ul><li>LOGMSG_STANDARD, which is &#8220;write to log whenever informational logging is enabled&#8221;, which in most cases means &#8220;always&#8221;</li><li>LOGMSG_TRACEONLY, which is &#8220;write to log if this WiX build is a DEBUG build&#8221; (is often used internally to dump CustomActionData contents)<br /></li><li>LOGMSG_VERBOSE, which is &#8220;write to log when LOGVERBOSE&#8221;</li></ul><div>Wait a minute, what does the last option means? I&#8217;ve already set the verbose logging by /L*v, but I don&#8217;t see more entries there. Here is the algorithm WiX CA use to know whether to write a log entry marked as LOGMSG_VERBOSE level:</div><div><ul><li>Check if the LOGVERBOSE property is set (can be set in the command-line since it is public)</li><li>Otherwise, check if the MsiLogging property is set (MSI 4.0+)</li><li>Otherwise, check the <a href="http://msdn.microsoft.com/en-us/library/aa369776(VS.85).aspx">logging policy in the registry</a></li></ul><div><br /></div><div>So, the following is the easiest way in my opinion to make your MSI (WiX-based) log file even more verbose:</div><div><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">   msiexec /i package.msi &#8230; LOGVERBOSE=1 /L*v install.log</span></span></div><div><br /></div><div>Hope this helps.<br /></div><div><br /></div><div>P.S. This is just a brief extract of what&#8217;s there in the source code. As usual, code is the best documentation ;-)</div></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS extension: WebAppPool]]></title>
    <link href="http://yansklyarenko.github.io/blog/2009/01/20/iis-extension-webapppool/"/>
    <updated>2009-01-20T22:06:00+02:00</updated>
    <id>http://yansklyarenko.github.io/blog/2009/01/20/iis-extension-webapppool</id>
    <content type="html"><![CDATA[<div class='post'>
Another challenge - another piece of fun with WiX. Imagine the following requirement: the installation program must install an application pool on IIS6+ environments; the multiple installed instances should use the same application pool. In other words, the application pool must be created with the first instance installation, and must be removed with the last instance uninstallation. <div><br /></div><div>A special element for maintaining IIS AppPools in IIS extension is called WebAppPool. As usual, we&#8217;ll wrap it into a separate component, so that it is created on install. Later, we&#8217;ll create a special custom action to deceive the standard removing mechanism on uninstall:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Component DiskId=&#8221;1&#8221; Id=&#8221;CreateIISAppPool&#8221; Guid=&#8221;{YOURGUID-6C5B-4980-AD0B-E32FA2DBC1F4}&#8221; Directory=&#8221;WebsiteFolder&#8221;&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;Condition&gt;IISMAJORVERSION &lt;&gt; &#8220;#5&#8221;&lt;/Condition&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;iis:WebAppPool Id=&#8221;IISSiteAppPool6&#8221; Name=&#8221;[IISAPPPOOL_NAME]&#8221; MaxWorkerProcesses=&#8221;1&#8221; Identity=&#8221;networkService&#8221; /&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;RegistryKey Root=&#8221;HKLM&#8221; Key=&#8221;$(var.ParentKey)&#8221;&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            &lt;RegistryValue Name=&#8221;IISAppPoolName&#8221; Type=&#8221;string&#8221; Value=&#8221;[IISAPPPOOL_NAME]&#8221;/&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;/RegistryKey&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Component&gt;</span></span></div><div><br /></div></div><div>As you can see, the component is installed once the target system has IIS 6+. It creates a WebAppPool with the name provided in IISAPPPOOL_NAME public property. It also writes this name into a registry value, which resides under the instance-specific registry key. </div><div>With this component included into the MSI package, the app pool is created when the first instance is installed, and nothing happens for second and subsequent instances. </div><div><br /></div><div>Let&#8217;s examine the uninstall behavior. The MSI behaves natural - when it meets the component to uninstall, it removes the WebAppPool specified in it. But the IIS extension which performs the actual deletion of app pool, needs the name to be passed in it. So, the only thing we should do is to supply this action with a fake app pool name each time, except for the last instance uninstall.</div><div><br /></div><div>Here is the algorithm:</div><div><ol><li>search the registry for the app pool name as usual<br /></li><li>schedule a special action on unistall after AppSearch, which detects if this is the last instance being uninstalled, and if not, &#8220;breaks&#8221; the app pool name into something non-existent<br /></li></ol><div>The first point is quite straight-forward:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;Property Id=&#8221;IISAPPPOOL_NAME&#8221;&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         &lt;RegistrySearch Id=&#8221;IISAppPoolName&#8221; Root=&#8221;HKLM&#8221; Key=&#8221;$(var.ParentKey)&#8221; Name=&#8221;IISAppPoolName&#8221; Type=&#8221;raw&#8221; /&gt;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      &lt;/Property&gt;</span></span></div><div><br /></div></div><div>The second one is not natural, like any hack:</div><div><br /></div><div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      [CustomAction]</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      public static ActionResult ChangeWebAppPoolNameToDeceiveUninstall(Session session)</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         int numberOfInstalled = 1;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         foreach (ProductInstallation product in ProductInstallation.GetRelatedProducts(session[&#8220;UpgradeCode&#8221;]))</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            if ((session[&#8220;ProductCode&#8221;] != product.ProductCode) &amp;&amp; product.IsInstalled)</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            {</span></span></div><div><span class="Apple-style-span"  style="color: rgb(51, 51, 255);  font-size:13px;">               numberOfInstalled++;</span><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">               break;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);"><br /></span></span></div><div><span class="Apple-style-span"  style="color: rgb(51, 51, 255);  font-size:13px;">         if (numberOfInstalled > 1)</span><br /></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         {</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">            session[&#8220;IISAPPPOOL_NAME&#8221;] += string.Format(&#8220;|{0}&#8221;, DateTime.Now.ToLongTimeString());</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         }</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);"><br /></span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">         return ActionResult.Success;</span></span></div><div><span class="Apple-style-span"  style="font-size:small;"><span class="Apple-style-span" style="color: rgb(51, 51, 255);">      }</span></span></div><div><br /></div></div><div>It iterates the related products (those sharing the UpgradeCode), and if it finds others installed, except for itself, it changes the app pool name we retrieved from registry into something unique, for instance, appends a unique string.</div><div><br /></div><div>Thus, the IIS custom action which is going to delete the app pool fails to find the one with the provided name, and does nothing. When, otherwise, it is the last instance being uninstalled, the retrieved app pool name remains unchanged, and the app pool is successfully removed.</div><div><br /></div><div>Note that the mentioned action should be <span class="Apple-style-span" style="font-weight: bold;">immediate</span>, should occur <span class="Apple-style-span" style="font-weight: bold;">after</span> AppSearch on <span class="Apple-style-span" style="font-weight: bold;">uninstall</span>.</div><div><br /></div><div>That&#8217;s it! I would appreciate any comments as usual.</div></div></div>
]]></content>
  </entry>
  
</feed>
